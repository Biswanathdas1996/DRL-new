[
  {
    "id": 1733987776,
    "name": "Give me all the hq",
    "use": "Static",
    "query": "SELECT * FROM public.hq",
    "questions": ["Give me all the division", "Question 8?"]
  },
  {
    "id": 1,
    "name": "Show the data for HQ name like '%Hyderabad%' , along with their total sales, total targets, and the percentage of target achieved for brands in the 'BIG & INVEST' category for November last year.",
    "use": "Dynamic",
    "query": "SELECT hq.name AS \"HQ Name\", SUM(sales.primary_sales) AS \"Total Sales\", SUM(target.target_value) AS \"Total Target\", ROUND((SUM(sales.primary_sales) / SUM(target.target_value)) * 100, 2) AS \"Percent Achieved\" FROM sales INNER JOIN target ON sales.hq_id = target.hq_id AND sales.sku_code = target.sku_code INNER JOIN hq ON sales.hq_id = hq.id INNER JOIN brandskumap ON sales.sku_code = brandskumap.sku_code INNER JOIN brand ON brandskumap.brand_id = brand.id WHERE EXTRACT(MONTH FROM sales.transaction_date) = 11 AND EXTRACT(YEAR FROM sales.transaction_date) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 AND EXTRACT(MONTH FROM target.target_date) = 11 AND EXTRACT(YEAR FROM target.target_date) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 AND brand.category LIKE '%BIG &INVEST%' AND hq.name LIKE '%Hyderabad%' GROUP BY hq.id, hq.name ORDER BY \"Percent Achieved\" DESC;",
    "questions": ["How does it compare to previous 2 months"],
    "analytics": [
      {
        "type": "Bar Chart",
        "x-axis": "HQ Name",
        "y-axis": ["Total Sales", "Total Target"]
      },
      {
        "type": "Line Chart",
        "x-axis": "HQ Name",
        "y-axis": ["percent_achieved"]
      }
    ]
  },
  {
    "id": 1.1,
    "name": "How does it compare to previous 2 months",
    "use": "Dynamic",
    "query": "SELECT hq.name AS \"HQ Name\", SUM(sales.primary_sales) AS \"Total Sales\", SUM(target.target_value) AS \"Total Target\", ROUND((SUM(sales.primary_sales) / SUM(target.target_value)) * 100, 2) AS \"Percent Achieved\" FROM sales INNER JOIN target ON sales.hq_id = target.hq_id AND sales.sku_code = target.sku_code INNER JOIN hq ON sales.hq_id = hq.id INNER JOIN brandskumap ON sales.sku_code = brandskumap.sku_code INNER JOIN brand ON brandskumap.brand_id = brand.id WHERE EXTRACT(MONTH FROM sales.transaction_date) = 11 AND EXTRACT(YEAR FROM sales.transaction_date) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 AND EXTRACT(MONTH FROM target.target_date) = 11 AND EXTRACT(YEAR FROM target.target_date) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 AND brand.category LIKE '%BIG &INVEST%' AND hq.name LIKE '%Hyderabad%' GROUP BY hq.id, hq.name ORDER BY \"Percent Achieved\" DESC;",
    "questions": [],
    "analytics": [
      {
        "type": "Bar Chart",
        "x-axis": "HQ Name",
        "y-axis": [
          "Current_Month-1 Target Sale",
          "Current_Month-1 Actual Sales"
        ]
      },
      {
        "type": "Bar Chart",
        "x-axis": "HQ Name",
        "y-axis": [
          "Current_Month-2 Target Sales",
          "Current_Month-2 Actual Sales"
        ]
      }
    ]
  },
  {
    "id": 2,
    "name": "Provide the total primary sales, total returns, and the percentage of returns for the brand 'Cheerio' across  HQ '%Mumbai%' for the past 2 months (from the current date) and be grouped by month",
    "use": "Dynamic",
    "query": "SELECT TO_CHAR(DATE_TRUNC('month', s.TRANSACTION_DATE), 'Month') AS month, SUM(CASE WHEN s.status != 'Returns' THEN s.PRIMARY_SALES ELSE 0 END) AS primary_sales, SUM(CASE WHEN s.status = 'Returns' THEN s.PRIMARY_SALES ELSE 0 END) AS sales_return_value, ROUND((SUM(CASE WHEN s.status = 'Returns' THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN s.status != 'Returns' THEN s.PRIMARY_SALES ELSE 0 END), 0)) * 100, 2) AS sales_return_percentage FROM Sales s JOIN HQ h ON s.HQ_ID = h.ID JOIN BrandSKUMap bsku ON s.SKU_CODE = bsku.SKU_Code JOIN Brand b ON bsku.Brand_ID = b.ID WHERE h.Name LIKE '%Agartala%' AND b.Name LIKE '%Cheerio%' AND s.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' GROUP BY DATE_TRUNC('month', s.TRANSACTION_DATE) ORDER BY DATE_TRUNC('month', s.TRANSACTION_DATE) LIMIT 5;",
    "questions": [
      "Retrieve a list of stockists who have recorded sales returns in each of the last 3 months for the brand 'Cheerio'. For each stockist, provide the return values for the last three months separately, along with the total return value over this period. Also, calculate the total sales (including both positive and negative sales) over the same period. Compute the return percentage as the ratio of total returns to total sales. Only include stockists where returns have been recorded for all three months. Rank the results based on the highest total return value over the last 3 months and limit the output to the top 5 stockists."
    ]
  },
  {
    "id": 2.1,
    "name": "Retrieve a list of stockists who have recorded sales returns in each of the last 3 months for the brand 'Cheerio'. For each stockist, provide the return values for the last three months separately, along with the total return value over this period. Also, calculate the total sales (including both positive and negative sales) over the same period. Compute the return percentage as the ratio of total returns to total sales. Only include stockists where returns have been recorded for all three months. Rank the results based on the highest total return value over the last 3 months and limit the output to the top 5 stockists.",
    "use": "Dynamic",
    "query": "SELECT s.Name AS \"Stockist Name\", SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) AS \"Current_Month-3 Returns\", SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) AS \"Current_Month-2 Returns\", SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) AS \"Current_Month-1 Returns\", SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) + SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 months') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) + SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) AS \"Total Returns 3 Months\", SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES >= 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) + SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES < 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) AS \"Sales 3 Months\", CASE WHEN SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES >= 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) + SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES < 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) = 0 THEN 0 ELSE ((SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) + SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 months') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) + SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0)) / (SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES >= 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) + SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES < 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)))) * 100 END AS \"Return Percentage\" FROM Stockist s JOIN Sales sa ON s.ID = sa.Stockist_ID JOIN BrandSKUMap bs ON sa.SKU_CODE = bs.SKU_Code JOIN Brand b ON bs.Brand_ID = b.ID WHERE b.Name LIKE '%FITYDENT TAB%' GROUP BY s.Name HAVING CASE WHEN SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES >= 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) + SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES < 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) = 0 THEN 0 ELSE ((SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) + SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 months') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) + SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0)) / (SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES >= 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) + SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES < 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)))) * 100 END < 0 ORDER BY \"Total Returns 3 Months\" DESC LIMIT 5;",
    "questions": [
      "Which stockist has recorded returns for last 3 months?",
      "What is the target achievement and returns this year for Cheerio?"
    ]
  },
  {
    "id": 3,
    "name": "What is the total sales, total target and the perecent achieved for HQ name like '%Hyderabad%' for November month.",
    "use": "Dynamic",
    "query": "SELECT hq.name AS \"HQ Name\", SUM(sales.primary_sales) AS \"Total Sales\", SUM(target.target_value) AS \"Total Target\", ROUND((SUM(sales.primary_sales) / SUM(target.target_value)) * 100, 2) AS \"Percent Achieved\" FROM sales INNER JOIN target ON sales.hq_id = target.hq_id AND sales.sku_code = target.sku_code INNER JOIN hq ON sales.hq_id = hq.id INNER JOIN brandskumap ON sales.sku_code = brandskumap.sku_code INNER JOIN brand ON brandskumap.brand_id = brand.id WHERE EXTRACT(MONTH FROM sales.transaction_date) = 11 AND EXTRACT(YEAR FROM sales.transaction_date) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 AND EXTRACT(MONTH FROM target.target_date) = 11 AND EXTRACT(YEAR FROM target.target_date) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 AND hq.name LIKE '%Hyderabad%' GROUP BY hq.id, hq.name ORDER BY \"Percent Achieved\" DESC;",
    "questions": [
      "Which brands should I focus on to complete my quarterly target?",
      "Give me all the division"
    ]
  },
  {
    "id": 3.1,
    "name": "Create a performance report showing the total sales, sales target, surplus, and achievement percentage for each brand in the current quarter. Only include brands where the sales surpass the target",
    "use": "Dynamic",
    "query": "SELECT b.name AS \"Brand Name\", SUM(s.primary_sales) AS \"Total Sales\", SUM(t.target_value) AS \"Sales Target\", SUM(s.primary_sales) - SUM(t.target_value) AS \"Surplus\", CASE WHEN SUM(t.target_value) = 0 THEN 0 ELSE (SUM(s.primary_sales) / SUM(t.target_value)) * 100 END AS \"Achievement Percentage\" FROM brand b JOIN brandskumap bs ON b.id = bs.brand_id JOIN sales s ON bs.sku_code = s.sku_code JOIN target t ON s.sku_code = t.sku_code AND s.division_code = t.division_code AND s.hq_id = t.hq_id AND EXTRACT(QUARTER FROM s.transaction_date) = EXTRACT(QUARTER FROM CURRENT_DATE) JOIN userdetails ud ON s.hq_id = ud.hq_id WHERE ud.name = 'Santanu Sarmah' GROUP BY b.name HAVING SUM(s.primary_sales) - SUM(t.target_value) > 0 ORDER BY \"Surplus\" DESC;",
    "questions": []
  },
  {
    "id": 3.2,
    "name": "Create a performance report showing the total sales, sales target, deficit, and achievement percentage for each brand in the current quarter. Only include brands where the sales deficit the targets",
    "use": "Dynamic",
    "query": "SELECT b.name AS \"Brand Name\", SUM(s.primary_sales) AS \"Total Sales\", SUM(t.target_value) AS \"Sales Target\", SUM(s.primary_sales) - SUM(t.target_value) AS \"Deficit\", CASE WHEN SUM(t.target_value) = 0 THEN 0 ELSE (SUM(s.primary_sales) / SUM(t.target_value)) * 100 END AS \"Achievement Percentage\" FROM brand b JOIN brandskumap bs ON b.id = bs.brand_id JOIN sales s ON bs.sku_code = s.sku_code JOIN target t ON s.sku_code = t.sku_code AND s.division_code = t.division_code AND s.hq_id = t.hq_id AND EXTRACT(QUARTER FROM s.transaction_date) = EXTRACT(QUARTER FROM CURRENT_DATE) JOIN userdetails ud ON s.hq_id = ud.hq_id WHERE ud.name = 'Santanu Sarmah' GROUP BY b.name HAVING SUM(s.primary_sales) - SUM(t.target_value) < 0 ORDER BY \"Deficit\" ASC;",
    "questions": []
  },
  {
    "id": 4,
    "name": "Fetch the achievement percentage for HQs over the past 3 months, including individual month performance and total average achievement, filtering out HQs where performance is under 85% in all 3 months.",
    "use": "Dynamic",
    "query": "SELECT h.Name AS HQ_Name, ROUND(COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.TRANSACTION_DATE) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_PART('MONTH', t.target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0),2) AS \"Current_Month-3 Achievement_Percentage\", ROUND(COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.TRANSACTION_DATE) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_PART('MONTH', t.target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0),2) AS \"Current_Month-2 Achievement_Percentage\", ROUND(COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.TRANSACTION_DATE) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_PART('MONTH', t.target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0),2) AS \"Current_Month-1 Achievement_Percentage\", ROUND(COALESCE((SUM(CASE WHEN DATE_PART('MONTH', s.TRANSACTION_DATE) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END) + SUM(CASE WHEN DATE_PART('MONTH', s.TRANSACTION_DATE) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END) + SUM(CASE WHEN DATE_PART('MONTH', s.TRANSACTION_DATE) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END)) / NULLIF(SUM(CASE WHEN DATE_PART('MONTH', t.target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN t.TARGET_UNITS ELSE 0 END) + SUM(CASE WHEN DATE_PART('MONTH', t.target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN t.TARGET_UNITS ELSE 0 END) + SUM(CASE WHEN DATE_PART('MONTH', t.target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0),2) AS Total_Achievement_Percentage FROM Sales s JOIN HQ h ON S.HQ_ID = h.ID JOIN Target t ON s.SKU_CODE = t.SKU_CODE AND s.Division_Code = t.Division_Code AND s.HQ_ID = t.HQ_ID AND DATE_PART('MONTH', s.TRANSACTION_DATE) BETWEEN DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') AND DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('MONTH', t.target_date) BETWEEN DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') AND DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') JOIN (SELECT DISTINCT US.HQ_ID FROM USERDETAILS US JOIN ROLE R ON US.ROLEID = R.ID) US ON US.HQ_ID = h.ID GROUP BY h.Name HAVING COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.TRANSACTION_DATE) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_PART('MONTH', t.target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0) < 85 AND COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.TRANSACTION_DATE) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_PART('MONTH', t.target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0) < 85 AND COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.TRANSACTION_DATE) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_PART('MONTH', t.target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0) < 85 ORDER BY HQ_Name;",
    "questions": []
  },
  {
    "id": 4.1,
    "name": "Retrieve the HQ name, SKU name, and the monthly achievement percentages for the past three months, along with the total achievement percentage for the last 2 months, for  HQ name like '%Agartala%'. Filter results where any monthly achievement is below 85%, and display the HQ",
    "use": "Dynamic",
    "query": "SELECT h.Name AS \"HQ Name\", sku.Name AS \"SKU Name\", ROUND(COALESCE(SUM(CASE WHEN DATE_TRUNC('month', s.TRANSACTION_DATE) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_TRUNC('month', t.target_date) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month') THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0), 2) AS \"Two Months Ago Ach %\", ROUND(COALESCE(SUM(CASE WHEN DATE_TRUNC('month', s.TRANSACTION_DATE) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_TRUNC('month', t.target_date) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0), 2) AS \"Last Month Ach %\", ROUND(COALESCE(SUM(CASE WHEN DATE_TRUNC('month', s.TRANSACTION_DATE) = DATE_TRUNC('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_TRUNC('month', t.target_date) = DATE_TRUNC('month', CURRENT_DATE) THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0), 2) AS \"Current Month Ach %\", ROUND(COALESCE((SUM(CASE WHEN DATE_TRUNC('month', s.TRANSACTION_DATE) BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month') AND DATE_TRUNC('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END)) / NULLIF(SUM(CASE WHEN DATE_TRUNC('month', t.target_date) BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month') AND DATE_TRUNC('month', CURRENT_DATE) THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0), 2) AS Total_Achievement_Percentage FROM Sales s JOIN HQ h ON S.HQ_ID = h.ID JOIN Target t ON s.SKU_CODE = t.SKU_CODE AND s.Division_Code = t.Division_Code AND s.HQ_ID = t.HQ_ID JOIN SKU sku ON s.SKU_CODE = sku.Code JOIN (SELECT DISTINCT US.HQ_ID FROM USERDETAILS US JOIN ROLE R ON US.ROLEID = R.ID) US ON US.HQ_ID = h.ID WHERE s.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month') AND t.target_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month') AND h.NAME LIKE '%TM HQ - Agartala%' GROUP BY h.Name, sku.Name HAVING COALESCE(SUM(CASE WHEN DATE_TRUNC('month', s.TRANSACTION_DATE) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_TRUNC('month', t.target_date) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month') THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0) < 85 OR COALESCE(SUM(CASE WHEN DATE_TRUNC('month', s.TRANSACTION_DATE) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_TRUNC('month', t.target_date) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0) < 85 OR COALESCE(SUM(CASE WHEN DATE_TRUNC('month', s.TRANSACTION_DATE) = DATE_TRUNC('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_TRUNC('month', t.target_date) = DATE_TRUNC('month', CURRENT_DATE) THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0) < 85 ORDER BY SUM(s.PRIMARY_SALES) DESC LIMIT 5;",
    "questions": ["Give me all the division", "Question 8?"]
  },
  {
    "id": 8,
    "name": "Generate a sales performance report for HQ name like '%Hyderabad%', calculating mid-month sales for the current and previous two months. Include the total target and target achievement percentage for each period, comparing actual sales to targets for HQ.ensure data includes only transactions from the first 15 days of the current month or the full previous months. Return the HQ based on sales performance, ordered by HQ name.",
    "query": "SELECT hq.NAME, COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth-1\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth-2\", t1.TARGET_VALUE AS \"Total Target CurrentMonth\", t2.TARGET_VALUE AS \"Total Target CurrentMonth-1\", t3.TARGET_VALUE AS \"Total Target CurrentMonth-2\", ROUND((COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) / NULLIF(t1.TARGET_VALUE, 0)) * 100, 2) AS \"Target Ach % CurrentMonth\", ROUND((COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') THEN s.primary_sales ELSE 0 END), 0) / NULLIF(t2.TARGET_VALUE, 0)) * 100, 2) AS \"Target Ach % CurrentMonth-1\", ROUND((COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') THEN s.primary_sales ELSE 0 END), 0) / NULLIF(t3.TARGET_VALUE, 0)) * 100, 2) AS \"Target Ach % CurrentMonth-2\" FROM HQ hq LEFT JOIN SALES s ON s.HQ_ID = hq.id LEFT JOIN (SELECT HQ_ID, SUM(TARGET_VALUE) AS TARGET_VALUE FROM TARGET WHERE DATE_PART('MONTH', target_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', target_date) = DATE_PART('YEAR', CURRENT_DATE) GROUP BY HQ_ID) t1 ON t1.HQ_ID = hq.ID LEFT JOIN (SELECT HQ_ID, SUM(TARGET_VALUE) AS TARGET_VALUE FROM TARGET WHERE DATE_PART('MONTH', target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', target_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') GROUP BY HQ_ID) t2 ON t2.HQ_ID = hq.ID LEFT JOIN (SELECT HQ_ID, SUM(TARGET_VALUE) AS TARGET_VALUE FROM TARGET WHERE DATE_PART('MONTH', target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', target_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') GROUP BY HQ_ID) t3 ON t3.HQ_ID = hq.ID WHERE ((DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15) OR (DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month')) OR (DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months'))) AND hq.NAME LIKE '%TM HQ - Hyderabad%' GROUP BY hq.NAME, t1.TARGET_VALUE, t2.TARGET_VALUE, t3.TARGET_VALUE ORDER BY hq.NAME;",
    "use": "Dynamic",
    "questions": [
      "Which Stockist within these Headquarter are trailing?",
      "Would you like to compare the overall billing for the same stockists for the same time period?"
    ],
    "analytics": [
      {
        "type": "Bar Chart",
        "x-axis": "name",
        "y-axis": ["Total Target CurrentMonth-2"]
      },
      {
        "type": "Line Chart",
        "x-axis": "name",
        "y-axis": ["Target Ach % CurrentMonth-2"]
      }
    ]
  },
  {
    "id": 8.1,
    "name": "Fetch mid-month sales data for stockists under HQ name like '%Hyderabad%' for the current month, previous month, and two months ago. Only return records where the current month's sales are less than the greater of the sales from the previous two months. Display results in a tabular format showing HQ name, stockist name, and sales for each period.",
    "query": "SELECT hq.NAME AS \"HQ Name\", st.NAME AS \"Stockist Name\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth-1\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth-2\" FROM SALES s JOIN HQ hq ON s.HQ_ID = hq.ID JOIN STOCKIST st ON s.STOCKIST_ID = st.ID WHERE ((DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15) OR (DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('DAY', s.transaction_date) <= 15) OR (DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('DAY', s.transaction_date) <= 15)) AND hq.NAME LIKE '%TM HQ - Hyderabad%' GROUP BY s.HQ_ID, hq.NAME, st.NAME HAVING COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) < GREATEST(COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0), COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0)) ORDER BY \"HQ Name\", \"Stockist Name\" LIMIT 5;",
    "use": "Dynamic",
    "questions": []
  },
  {
    "id": 9,
    "name": "Fetch sales data for stockists under the Hyderabad HQ, focusing on mid-month transactions (before the 15th) for the last three months. Calculate the sales for each of these months and the average of the past three months. Compare the current month's sales to the average of the last three months, and only include stockists where the current month's sales are below that average. Group the results by stockist and HQ name to assess performance",
    "query": "SELECT hq.name AS \"HQ Name\", stockist.name AS \"Stockist Name\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN sales.primary_sales ELSE 0 END) AS \"Mid-month Current_Month-3\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN sales.primary_sales ELSE 0 END) AS \"Mid-month Current_Month-2\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN sales.primary_sales ELSE 0 END) AS \"Mid-month Current_Month-1\", ROUND((SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN sales.primary_sales ELSE 0 END)) / 3.0, 2) AS \"Average Last 3 Months Mid-month\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) THEN sales.primary_sales ELSE 0 END) AS \"Mid-month (Current Month)\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) THEN sales.primary_sales ELSE 0 END) - ROUND((SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN sales.primary_sales ELSE 0 END)) / 3.0, 2) AS \"Difference\" FROM sales JOIN hq ON sales.hq_id = hq.id JOIN stockist ON sales.stockist_id = stockist.id WHERE DATE_PART('day', sales.transaction_date) <= 15 AND hq.NAME LIKE '%TM HQ - Hyderabad%' GROUP BY hq.name, stockist.name, stockist.id HAVING SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) THEN sales.primary_sales ELSE 0 END) < ROUND((SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN sales.primary_sales ELSE 0 END)) / 3.0, 2);",
    "use": "Dynamic",
    "questions": [
      "Would you like to compare the overall billing for big/invest brands for the same stockist for the same time period?",
      "Would you like to see midmonth billing for your headquarter for the past 3 months"
    ]
  },
  {
    "id": 10,
    "name": "Which A class stockists are not billed for Clohex in the current month? ",
    "query": "SELECT s.Name AS StockistName FROM Stockist s JOIN StockistHQMap shm ON s.ID = shm.Stockist_ID JOIN HQ h ON shm.HQ_ID = h.ID LEFT JOIN Sales sa ON s.ID = sa.Stockist_ID AND sa.TRANSACTION_DATE >= date_trunc('month', current_date) AND sa.TRANSACTION_DATE < date_trunc('month', current_date) + interval '1 month' AND sa.SKU_CODE = (SELECT bs.SKU_Code FROM Brand b JOIN BrandSKUMap bs ON b.ID = bs.Brand_ID WHERE b.Name LIKE '%Clohex%') WHERE s.Name IS NOT NULL;",
    "use": "Dynamic",
    "questions": [
      "Give me all the hq?",
      "Would you like to compare the overall billing for the same stockists for the same time period?"
    ]
  },
  {
    "id": 10.1,
    "name": "Provide a detailed analysis of the Month-to-Date (MTD) sales trend for stockists under the Hyderabad HQ. For each stockist, show their sales performance for the current month, and compare it with the sales figures from the previous six months. The report should track the sales trend over the last 6 months, starting from the current month, to help assess any growth or decline in sales. Ensure that the data includes sales for each month in the past 6 months, starting from the most recent month, and highlight the performance difference over this period.",
    "query": "SELECT st.Name AS \"Stockist Name\", h.Name AS \"HQ Name\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '0 month' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) + INTERVAL '1 month' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '1 month' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END) AS \"Month -1\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '2 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -2\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '3 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -3\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '4 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '3 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -4\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '5 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '4 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -5\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '6 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '5 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -6\" FROM Sales s JOIN Stockist st ON s.Stockist_ID = st.ID JOIN HQ h ON s.HQ_ID = h.ID WHERE s.TRANSACTION_DATE >= date_trunc('month', CURRENT_DATE) - INTERVAL '6 months' AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) + INTERVAL '1 month' AND COALESCE(TRIM(st.Name), '') <> '' AND h.Name LIKE '%Hyderabad%' GROUP BY st.Name, h.Name, st.ID ORDER BY st.Name, h.Name LIMIT 5;",
    "use": "Dynamic",
    "questions": [
      "Give me all the hq?",
      "Would you like to compare the overall billing for the same stockists for the same time period?"
    ]
  },
  {
    "id": 11,
    "name": "Generate a comprehensive report for the 'TM HQ - Hyderabad' HQ, providing the Year-To-Date (YTD) sales and percentage achievement against targets, as well as a quarterly performance overview. The report should include the current month's sales, quarterly surplus or deficit, quarterly achievement percentage, and the target for the last month of the current quarter. The YTD values should be based on sales and targets for the period starting from the last fiscal year or the current fiscal year, depending on the month, and the quarterly values should reflect the performance for the ongoing quarter.",
    "query": "SELECT HQ.Name AS HQ_Name, COALESCE(SUM(S.Primary_Sales), 0) AS YTD_Sales, COALESCE(ROUND((SUM(S.Primary_Sales) * 100.0) / NULLIF(SUM(T.Target_Value), 0), 2), 0) AS YTD_Percentage_Achievement FROM (SELECT HQ_ID, SKU_CODE, DIVISION_CODE, SUM(Primary_Sales) AS Primary_Sales FROM Sales WHERE TRANSACTION_DATE BETWEEN CASE WHEN DATE_PART('month', CURRENT_DATE) >= 4 THEN DATE_TRUNC('year', CURRENT_DATE) + INTERVAL '3 months' ELSE DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '9 months' END AND CURRENT_DATE GROUP BY HQ_ID, SKU_CODE, DIVISION_CODE) S INNER JOIN (SELECT HQ_ID, SKU_CODE, DIVISION_CODE, SUM(Target_Value) AS Target_Value FROM Target WHERE Target_Date BETWEEN CASE WHEN DATE_PART('month', CURRENT_DATE) >= 4 THEN DATE_TRUNC('year', CURRENT_DATE) + INTERVAL '3 months' ELSE DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '9 months' END AND CURRENT_DATE GROUP BY HQ_ID, SKU_CODE, DIVISION_CODE) T ON S.HQ_ID = T.HQ_ID AND S.SKU_CODE = T.SKU_CODE AND S.DIVISION_CODE = T.DIVISION_CODE INNER JOIN HQ ON S.HQ_ID = HQ.ID WHERE HQ.NAME LIKE '%TM HQ - Hyderabad%' GROUP BY HQ.ID, HQ.Name;",
    "query2": "SELECT HQ.Name AS hq_name, SUM(s.PRIMARY_SALES) AS \"Current_Month-1 Sales\", SUM(s.PRIMARY_SALES) - COALESCE(SUM(t.TARGET_VALUE), 0) AS \"Quarterly Surplus/Deficit\", CASE WHEN COALESCE(SUM(t.TARGET_VALUE), 0) > 0 THEN ROUND((SUM(s.PRIMARY_SALES) * 100.0 / SUM(t.TARGET_VALUE)), 2) ELSE NULL END AS \"Quarterly % Ach.\", MAX(CASE WHEN date_part('month', t.target_date) = date_part('month', CURRENT_DATE) THEN t.TARGET_VALUE ELSE 0 END) AS \"Last_Month_Of_Quarter Target\" FROM Sales s LEFT JOIN Target t ON s.SKU_CODE = t.SKU_CODE AND s.Division_Code = t.Division_Code AND s.HQ_ID = t.HQ_ID AND date_part('year', s.TRANSACTION_DATE) = date_part('year', t.target_date) AND date_part('month', s.TRANSACTION_DATE) = date_part('month', t.target_date) INNER JOIN HQ ON s.HQ_ID = HQ.ID WHERE HQ.NAME LIKE '%TM HQ - Hyderabad%' AND date_part('quarter', s.TRANSACTION_DATE) = date_part('quarter', CURRENT_DATE) AND s.TRANSACTION_DATE <= CURRENT_DATE GROUP BY HQ.ID, HQ.Name;",
    "use": "Dynamic",
    "questions": []
  },
  {
    "id": 11.1,
    "name": "What would be my Siliguri HQ Brand wise plan for the month of Dec'24 to acheive his Q3 Target?",
    "query": "SELECT HQ.Name AS hq_name, SUM(s.PRIMARY_SALES) AS \"Current_Month-1 Sales\", SUM(s.PRIMARY_SALES) - COALESCE(SUM(t.TARGET_VALUE), 0) AS \"Quarterly Surplus/Deficit\", CASE WHEN COALESCE(SUM(t.TARGET_VALUE), 0) > 0 THEN ROUND((SUM(s.PRIMARY_SALES) * 100.0 / SUM(t.TARGET_VALUE)), 2) ELSE NULL END AS \"Quarterly % Ach.\", MAX(CASE WHEN date_part('month', t.target_date) = date_part('month', CURRENT_DATE) THEN t.TARGET_VALUE ELSE 0 END) AS \"Last_Month_Of_Quarter Target\" FROM Sales s LEFT JOIN Target t ON s.SKU_CODE = t.SKU_CODE AND s.Division_Code = t.Division_Code AND s.HQ_ID = t.HQ_ID AND date_part('year', s.TRANSACTION_DATE) = date_part('year', t.target_date) AND date_part('month', s.TRANSACTION_DATE) = date_part('month', t.target_date) INNER JOIN HQ ON s.HQ_ID = HQ.ID WHERE HQ.NAME LIKE '%TM HQ - Hyderabad%' AND date_part('quarter', s.TRANSACTION_DATE) = date_part('quarter', CURRENT_DATE) AND s.TRANSACTION_DATE <= CURRENT_DATE GROUP BY HQ.ID, HQ.Name;",
    "query2": "SELECT b.Name AS \"Brand Name\", SUM(s.PRIMARY_SALES) AS \"Current_Month-1 Sales\", SUM(s.PRIMARY_SALES) - COALESCE(SUM(t.TARGET_VALUE), 0) AS \"Quarterly Surplus/Deficit\", CASE WHEN COALESCE(SUM(t.TARGET_VALUE), 0) > 0 THEN ROUND((SUM(s.PRIMARY_SALES) * 100.0 / SUM(t.TARGET_VALUE)), 2) ELSE NULL END AS \"Quarterly % Ach.\", MAX(CASE WHEN date_part('month', t.target_date) = date_part('month', CURRENT_DATE) THEN t.TARGET_VALUE ELSE 0 END) AS \"Last_Month_Of_Quarter Target\" FROM Sales s LEFT JOIN Target t ON s.SKU_CODE = t.SKU_CODE AND s.Division_Code = t.Division_Code AND s.HQ_ID = t.HQ_ID AND date_part('year', s.TRANSACTION_DATE) = date_part('year', t.target_date) AND date_part('month', s.TRANSACTION_DATE) = date_part('month', t.target_date) INNER JOIN BrandSKUMap bs ON s.SKU_CODE = bs.SKU_Code INNER JOIN Brand b ON bs.Brand_ID = b.ID INNER JOIN HQ ON S.HQ_ID = HQ.ID WHERE HQ.NAME LIKE '%TM HQ - Agartala&' AND date_part('quarter', s.TRANSACTION_DATE) = date_part('quarter', CURRENT_DATE) AND s.TRANSACTION_DATE <= CURRENT_DATE GROUP BY b.ID, b.Name;",
    "use": "Dynamic",
    "questions": [
      "Give me all the hq?",
      "Would you like to compare the overall billing for the same stockists for the same time period?"
    ]
  },
  {
    "id": 12,
    "name": "What is week on week primary billing pattern for AllAhabad HQ for last 6 months?",
    "query": "SELECT TO_CHAR(DATE_TRUNC('month', s.transaction_date), 'Mon-YY') AS month, FLOOR((EXTRACT(DAY FROM s.transaction_date) - 1) / 7) + 1 AS week_number, SUM(s.primary_sales) AS weekly_sales, total_monthly_sales FROM sales s INNER JOIN hq ON s.hq_id = hq.id INNER JOIN stockist ON s.stockist_id = stockist.id INNER JOIN ( SELECT DATE_TRUNC('month', sales.transaction_date) AS month_start, SUM(sales.primary_sales) AS total_monthly_sales FROM sales INNER JOIN hq ON sales.hq_id = hq.id INNER JOIN stockist ON sales.stockist_id = stockist.id WHERE hq.name = 'TM HQ - Agartala' AND sales.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 months' GROUP BY DATE_TRUNC('month', sales.transaction_date) ) monthly_totals ON DATE_TRUNC('month', s.transaction_date) = monthly_totals.month_start WHERE hq.name LIKE '%TM HQ - Agartala%' AND s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month' GROUP BY month, week_number, total_monthly_sales, DATE_TRUNC('month', s.transaction_date) ORDER BY DATE_TRUNC('month', s.transaction_date);",
    "use": "Dynamic",
    "questions": [
      "Give me all the hq?",
      "Would you like to compare the overall billing for the same stockists for the same time period?"
    ]
  },
  {
    "id": 13,
    "name": "Which account is giving me drop in MEDVOL Channel when compared to Last 3 month Avg ?",
    "query": "SELECT * FROM ( SELECT hq.name AS hq_name, stockist.name AS stockist_name, ROUND(SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END),2) AS \"sales_current_month_minus_1\", ROUND(SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.primary_sales ELSE 0 END),2) AS \"sales_current_month_minus_2\", ROUND(SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.primary_sales ELSE 0 END),2) AS \"sales_current_month_minus_3\", ROUND(( SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) + SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.primary_sales ELSE 0 END) + SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.primary_sales ELSE 0 END) ) / 3, 2) AS avg_sales_last_three_months, ROUND(SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END),2) AS current_month_sales, ROUND( SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) - ( SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) + SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.primary_sales ELSE 0 END) + SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.primary_sales ELSE 0 END) ) / 3, 2) AS sales_difference FROM sales s JOIN hq ON s.hq_id = hq.id JOIN stockist ON s.stockist_id = stockist.id WHERE s.status LIKE '%MEDVOL%' AND s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' GROUP BY hq.name, stockist.name, stockist.id HAVING SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) < ( SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) + SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.primary_sales ELSE 0 END) + SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.primary_sales ELSE 0 END) ) / 3 ) AS subquery ORDER BY sales_difference LIMIT 5;",
    "use": "Dynamic",
    "questions": [
      "Give me all the hq?",
      "Would you like to compare the overall billing for the same stockists for the same time period?"
    ]
  },
  {
    "id": 14,
    "name": "Billing for which sku %%sku_name%% Inj was lesser in November as compared to previous 3 months?",
    "query": "SELECT st.name AS Stockist_Name, h.name AS HQ_Name, SUM(CASE WHEN EXTRACT(MONTH FROM s.transaction_date) = 8 AND EXTRACT(YEAR FROM s.transaction_date) = 2024 THEN s.primary_sales ELSE 0 END) AS primarysales_Aug_24, SUM(CASE WHEN EXTRACT(MONTH FROM s.transaction_date) = 9 AND EXTRACT(YEAR FROM s.transaction_date) = 2024 THEN s.primary_sales ELSE 0 END) AS primarysales_Sep_24, SUM(CASE WHEN EXTRACT(MONTH FROM s.transaction_date) = 10 AND EXTRACT(YEAR FROM s.transaction_date) = 2024 THEN s.primary_sales ELSE 0 END) AS primarysales_Oct_24, AVG(CASE WHEN EXTRACT(MONTH FROM s.transaction_date) IN (8, 9, 10) AND EXTRACT(YEAR FROM s.transaction_date) = 2024 THEN s.primary_sales ELSE NULL END) AS primarysales_Avg_Last_3_Months, SUM(CASE WHEN EXTRACT(MONTH FROM s.transaction_date) = 11 AND EXTRACT(YEAR FROM s.transaction_date) = 2024 THEN s.primary_sales ELSE 0 END) AS primarysales_Nov_24, SUM(CASE WHEN EXTRACT(MONTH FROM s.transaction_date) = 11 AND EXTRACT(YEAR FROM s.transaction_date) = 2024 THEN s.primary_sales ELSE 0 END) - AVG(CASE WHEN EXTRACT(MONTH FROM s.transaction_date) IN (8, 9, 10) AND EXTRACT(YEAR FROM s.transaction_date) = 2024 THEN s.primary_sales ELSE NULL END) AS Difference_in_billing FROM sales s JOIN stockist st ON s.stockistid = st.id JOIN hq h ON s.hqid = h.id GROUP BY st.id, h.id HAVING SUM(CASE WHEN EXTRACT(MONTH FROM s.transaction_date) = 11 AND EXTRACT(YEAR FROM s.transaction_date) = 2024 THEN s.primary_sales ELSE 0 END) < AVG(CASE WHEN EXTRACT(MONTH FROM s.transaction_date) IN (8, 9, 10) AND EXTRACT(YEAR FROM s.transaction_date) = 2024 THEN s.primary_sales ELSE NULL END) ORDER BY Difference_in_billing DESC;",
    "use": "Dynamic",
    "questions": [
      "Would you like to compare the overall billing for the same stockists for the same time period?",
      "Give me all the division"
    ]
  },
  {
    "id": 14.1,
    "name": "Would you like to compare the overall billing for the same stockists for the same time period?",
    "query": "SELECT st.Name AS \"Stockist Name\", hq.Name AS \"HQ Name\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month-3\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month-2\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month-1\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month\", ROUND(( ( SELECT COALESCE(SUM(s1.PRIMARY_SALES), 0) FROM Sales s1 WHERE DATE_PART('month', s1.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') ) + ( SELECT COALESCE(SUM(s2.PRIMARY_SALES), 0) FROM Sales s2 WHERE DATE_PART('month', s2.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month') ) + ( SELECT COALESCE(SUM(s3.PRIMARY_SALES), 0) FROM Sales s3 WHERE DATE_PART('month', s3.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') ) ) / 3, 2) AS \"Average_Primary Sales Last_3_Months\", ROUND( SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END) - ( ( SELECT COALESCE(SUM(s1.PRIMARY_SALES), 0) FROM Sales s1 WHERE DATE_PART('month', s1.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') ) + ( SELECT COALESCE(SUM(s2.PRIMARY_SALES), 0) FROM Sales s2 WHERE DATE_PART('month', s2.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month') ) + ( SELECT COALESCE(SUM(s3.PRIMARY_SALES), 0) FROM Sales s3 WHERE DATE_PART('month', s3.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') ) ) / 3, 2) AS Difference_In_Billing FROM Sales s JOIN Stockist st ON s.Stockist_ID = st.ID JOIN HQ hq ON s.HQ_ID = hq.ID JOIN BrandSKUMap bs ON s.SKU_CODE = bs.SKU_Code JOIN Brand b ON bs.Brand_ID = b.ID WHERE b.Name LIKE '%KETOROL INJ%' GROUP BY st.Name, hq.Name HAVING ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END), 2) < ROUND(( ( SELECT COALESCE(SUM(s1.PRIMARY_SALES), 0) FROM Sales s1 WHERE DATE_PART('month', s1.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') ) + ( SELECT COALESCE(SUM(s2.PRIMARY_SALES), 0) FROM Sales s2 WHERE DATE_PART('month', s2.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month') ) + ( SELECT COALESCE(SUM(s3.PRIMARY_SALES), 0) FROM Sales s3 WHERE DATE_PART('month', s3.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') ) ) / 3, 2) ORDER BY Difference_In_Billing LIMIT 5;",
    "use": "Dynamic",
    "questions": [
      "Would you like to compare the overall billing for the same stockists for the same time period?",
      "Give me all the division"
    ]
  },
  {
    "id": 1738162167067,
    "name": "What is the sales for HQ LIKE '%DELHI%' IN December Month.",
    "query": "SELECT\n     SUM(sales.primary_sales)\nFROM\n     sales\n     JOIN hq ON sales.hq_id = hq.id\nWHERE\n     hq.name LIKE '%Delhi%'\n     AND EXTRACT(\n          MONTH\n          FROM\n               sales.transaction_date\n     ) = 12;"
  }
]
