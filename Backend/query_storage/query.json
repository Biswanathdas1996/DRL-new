[
  {
    "id": 1733987776,
    "name": "Give me all the hq",
    "use": "Static",
    "query": "SELECT * FROM public.hq",
    "questions": ["Give me all the division", "Question 8?"]
  },
  {
    "id": 1,
    "name": "what is the priority brand performance for last month",
    "use": "Static",
    "query": "SELECT HQ.Name AS \"HQ Name\", SUM(Sales.PRIMARY_SALES) AS \"Total Sales\", SUM(Target.TARGET_VALUE) AS \"Total Target\", ROUND((SUM(Sales.PRIMARY_SALES) / SUM(Target.TARGET_VALUE)) * 100, 2) AS Percent_Achieved FROM Sales INNER JOIN Target ON Sales.HQ_ID = Target.HQ_ID AND Sales.SKU_CODE = Target.SKU_CODE INNER JOIN HQ ON Sales.HQ_ID = HQ.ID INNER JOIN BrandSKUMap bsku ON Sales.SKU_CODE = bsku.SKU_Code INNER JOIN Brand b ON bsku.Brand_ID = b.ID JOIN USERDETAILS US ON US.HQ_ID = HQ.ID JOIN ROLE R ON US.ROLEID = R.ID WHERE DATE_PART('month', Sales.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month') AND DATE_PART('year', Sales.TRANSACTION_DATE) = DATE_PART('year', CURRENT_DATE - INTERVAL '1 year') AND DATE_PART('month', Target.target_date) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month') AND DATE_PART('year', Target.target_date) = DATE_PART('year', CURRENT_DATE - INTERVAL '1 year') AND b.category LIKE '%BIG &INVEST%' GROUP BY HQ.ID, HQ.Name ORDER BY Percent_Achieved DESC LIMIT 5;",
    "questions": ["How does it compare to previous 2 months"],
    "analytics": [
      {
        "type": "Bar Chart",
        "x-axis": "HQ Name",
        "y-axis": ["Total Sales", "Total Target"]
      },
      {
        "type": "Line Chart",
        "x-axis": "HQ Name",
        "y-axis": ["percent_achieved"]
      }
    ]
  },
  {
    "id": 1.1,
    "name": "How does it compare to previous 2 months",
    "use": "Static",
    "query": "SELECT HQ.Name AS \"HQ Name\", SUM(CASE WHEN Sales.SALES_MONTH = TO_CHAR((CURRENT_DATE - INTERVAL '2 months')::DATE, 'YYYY-MM') THEN Target.TARGET_VALUE ELSE 0 END) AS \"Current_Month-2 Target Sales\", SUM(CASE WHEN Sales.SALES_MONTH = TO_CHAR((CURRENT_DATE - INTERVAL '2 months')::DATE, 'YYYY-MM') THEN Sales.ACTUAL_SALES ELSE 0 END) AS \"Current_Month-2 Actual Sales\", CASE WHEN SUM(CASE WHEN Sales.SALES_MONTH = TO_CHAR((CURRENT_DATE - INTERVAL '2 months')::DATE, 'YYYY-MM') THEN Target.TARGET_VALUE ELSE 0 END) = 0 THEN 0 ELSE ROUND(SUM(CASE WHEN Sales.SALES_MONTH = TO_CHAR((CURRENT_DATE - INTERVAL '2 months')::DATE, 'YYYY-MM') THEN Sales.ACTUAL_SALES ELSE 0 END) * 100.0 / SUM(CASE WHEN Sales.SALES_MONTH = TO_CHAR((CURRENT_DATE - INTERVAL '2 months')::DATE, 'YYYY-MM') THEN Target.TARGET_VALUE ELSE 0 END), 2) END AS \"Current_Month-2 Percentage Achievement\", SUM(CASE WHEN Sales.SALES_MONTH = TO_CHAR((CURRENT_DATE - INTERVAL '1 month')::DATE, 'YYYY-MM') THEN Target.TARGET_VALUE ELSE 0 END) AS \"Current_Month-1 Target Sales\", SUM(CASE WHEN Sales.SALES_MONTH = TO_CHAR((CURRENT_DATE - INTERVAL '1 month')::DATE, 'YYYY-MM') THEN Sales.ACTUAL_SALES ELSE 0 END) AS \"Current_Month-1 Actual Sales\", CASE WHEN SUM(CASE WHEN Sales.SALES_MONTH = TO_CHAR((CURRENT_DATE - INTERVAL '1 month')::DATE, 'YYYY-MM') THEN Target.TARGET_VALUE ELSE 0 END) = 0 THEN 0 ELSE ROUND(SUM(CASE WHEN Sales.SALES_MONTH = TO_CHAR((CURRENT_DATE - INTERVAL '1 month')::DATE, 'YYYY-MM') THEN Sales.ACTUAL_SALES ELSE 0 END) * 100.0 / SUM(CASE WHEN Sales.SALES_MONTH = TO_CHAR((CURRENT_DATE - INTERVAL '1 month')::DATE, 'YYYY-MM') THEN Target.TARGET_VALUE ELSE 0 END), 2) END AS \"Current_Month-1 Percentage Achievement\" FROM (SELECT HQ_ID, SKU_CODE, TO_CHAR(TRANSACTION_DATE, 'YYYY-MM') AS SALES_MONTH, SUM(PRIMARY_SALES) AS ACTUAL_SALES FROM Sales WHERE TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 months') AND TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE) GROUP BY HQ_ID, SKU_CODE, TO_CHAR(TRANSACTION_DATE, 'YYYY-MM')) Sales JOIN Target ON Sales.HQ_ID = Target.HQ_ID AND Sales.SKU_CODE = Target.SKU_CODE AND Sales.SALES_MONTH = TO_CHAR(Target.target_date, 'YYYY-MM') JOIN HQ ON Sales.HQ_ID = HQ.ID INNER JOIN BrandSKUMap bsku ON Sales.SKU_CODE = bsku.SKU_Code INNER JOIN Brand b ON bsku.Brand_ID = b.ID JOIN USERDETAILS US ON US.HQ_ID = HQ.ID JOIN ROLE R ON US.ROLEID = R.ID WHERE Target.target_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 months') AND Target.target_date < DATE_TRUNC('month', CURRENT_DATE) GROUP BY HQ.Name ORDER BY HQ.Name LIMIT 5;",
    "questions": [],
    "analytics": [
      {
        "type": "Bar Chart",
        "x-axis": "HQ Name",
        "y-axis": [
          "Current_Month-1 Target Sale",
          "Current_Month-1 Actual Sales"
        ]
      },
      {
        "type": "Bar Chart",
        "x-axis": "HQ Name",
        "y-axis": [
          "Current_Month-2 Target Sales",
          "Current_Month-2 Actual Sales"
        ]
      }
    ]
  },

  {
    "id": 2,
    "name": "What is the % returns for brand Cheerio in Mumbai Headquarter in last 3 months",
    "use": "Dynamic",
    "query": "SELECT TO_CHAR(DATE_TRUNC('month', s.TRANSACTION_DATE), 'Month') AS month, SUM(CASE WHEN s.status != 'Returns' THEN s.PRIMARY_SALES ELSE 0 END) AS primary_sales, SUM(CASE WHEN s.status = 'Returns' THEN s.PRIMARY_SALES ELSE 0 END) AS sales_return_value, ROUND((SUM(CASE WHEN s.status = 'Returns' THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN s.status != 'Returns' THEN s.PRIMARY_SALES ELSE 0 END), 0)) * 100, 2) AS sales_return_percentage FROM Sales s JOIN HQ h ON s.HQ_ID = h.ID JOIN BrandSKUMap bsku ON s.SKU_CODE = bsku.SKU_Code JOIN Brand b ON bsku.Brand_ID = b.ID JOIN USERDETAILS US ON US.HQ_ID = h.ID JOIN ROLE R ON US.ROLEID = R.ID WHERE h.Name LIKE '%Mumbai%' AND b.Name LIKE '%Cheerio%' AND s.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' GROUP BY DATE_TRUNC('month', s.TRANSACTION_DATE) ORDER BY DATE_TRUNC('month', s.TRANSACTION_DATE);",
    "questions": [
      "Which stockist has recorded returns for last 3 months?",
      "What is the target achievement and returns this year for Cheerio?"
    ]
  },
  {
    "id": 2.1,
    "name": "Which stockist has recorded returns for last 3 months?",
    "use": "Dynamic",
    "query": "SELECT s.Name AS \"Stockist Name\", SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) AS \"Current_Month-3 Returns\", SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) AS \"Current_Month-2 Returns\", SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) AS \"Current_Month-1 Returns\", SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) + SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 months') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) + SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) AS \"Total Returns 3 Months\", SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES >= 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) + SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES < 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) AS \"Sales 3 Months\", CASE WHEN SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES >= 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) + SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES < 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) = 0 THEN 0 ELSE ((SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) + SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 months') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) + SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0)) / (SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES >= 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) + SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES < 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)))) * 100 END AS \"Return Percentage\" FROM Stockist s JOIN Sales sa ON s.ID = sa.StockistID JOIN BrandSKU bs ON sa.SKUCODE = bs.SKUCode JOIN Brand b ON bs.BrandID = b.ID WHERE b.Name LIKE '%FITYDENT TAB%' GROUP BY s.Name HAVING CASE WHEN SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES >= 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) + SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES < 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) = 0 THEN 0 ELSE ((SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) + SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 months') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) + SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0)) / (SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES >= 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) + SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES < 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)))) * 100 END < 0 ORDER BY \"Total Returns 3 Months\" DESC;",
    "questions": [
      "Which stockist has recorded returns for last 3 months?",
      "What is the target achievement and returns this year for Cheerio?"
    ]
  },
  {
    "id": 3,
    "name": "What were my sales for November 2024?",
    "use": "Dynamic",
    "query": "SELECT h.Name AS \"HQ Name\", SUM(t.TARGET_VALUE) AS \"Nov'24 Target\", SUM(s.PRIMARY_SALES) AS \"Nov'24 Sales\", ROUND((SUM(s.PRIMARY_SALES) / SUM(t.TARGET_VALUE)) * 100, 2) AS \"Nov'24 % Ach\" FROM Sales s JOIN Target t ON s.HQID = t.HQID AND s.DivisionCode = t.DivisionCode AND s.SKUCODE = t.SKUCODE JOIN HQ h ON s.HQID = h.ID WHERE s.TRANSACTION_DATE BETWEEN '2024-11-01' AND '2024-11-30' AND EXTRACT(MONTH FROM t.target_date) = 11 AND EXTRACT(YEAR FROM t.target_date) = 2024  GROUP BY h.Name ORDER BY h.Name;",
    "questions": [
      "Which brands should I focus on to complete my quarterly target?",
      "Give me all the division"
    ]
  },
  {
    "id": 3.1,
    "name": "Which brands should I focus on to complete my quarterly target?",
    "use": "Static",
    "query": "SELECT b.Name AS \"Brand Name\", SUM(s.PRIMARY_SALES) - SUM(t.TARGET_VALUE) AS \"Quarterly Deficit\", CASE WHEN SUM(t.TARGET_VALUE) > 0 THEN ROUND((SUM(s.PRIMARY_SALES) * 100.0 / SUM(t.TARGET_VALUE)), 2) ELSE NULL END AS \"Quarterly % Ach.\", SUM(t.TARGET_VALUE) AS \"Quarterly Total Target\" FROM Sales s JOIN Target t ON s.SKUCODE = t.SKUCODE AND s.DivisionCode = t.DivisionCode AND s.HQID = t.HQID AND date_part('year', s.TRANSACTION_DATE) = date_part('year', t.target_date) AND date_part('month', s.TRANSACTION_DATE) = date_part('month', t.target_date) JOIN BrandSKU bs ON s.SKUCODE = bs.SKUCode JOIN Brand b ON bs.BrandID = b.ID WHERE s.TRANSACTION_DATE <= CURRENT_DATE AND date_part('quarter', s.TRANSACTION_DATE) = date_part('quarter', CURRENT_DATE) GROUP BY b.Name ORDER BY \"Quarterly Deficit\" DESC;",
    "query2": "SELECT b.Name AS \"Brand Name\", SUM(s.PRIMARY_SALES) - SUM(t.TARGET_VALUE) AS \"Quarterly Surplus\", CASE WHEN SUM(t.TARGET_VALUE) > 0 THEN ROUND(SUM(s.PRIMARY_SALES) * 100.0 / SUM(t.TARGET_VALUE), 2) ELSE NULL END AS \"Quarterly % Ach.\", SUM(t.TARGET_VALUE) AS \"Quarterly Total Target\" FROM Sales s JOIN Target t ON s.SKUCODE = t.SKUCODE AND s.DivisionCode = t.DivisionCode AND s.HQID = t.HQID AND date_part('year', s.TRANSACTION_DATE) = date_part('year', t.target_date) AND date_part('month', s.TRANSACTION_DATE) = date_part('month', t.target_date) JOIN BrandSKU bs ON s.SKUCODE = bs.SKUCode JOIN Brand b ON bs.BrandID = b.ID WHERE s.TRANSACTION_DATE <= CURRENT_DATE AND date_part('quarter', s.TRANSACTION_DATE) = date_part('quarter', CURRENT_DATE) GROUP BY b.Name HAVING SUM(s.PRIMARY_SALES) - SUM(t.TARGET_VALUE) > 0 ORDER BY \"Quarterly Surplus\" DESC;",
    "questions": ["Give me all the division", "Question 8?"]
  },
  {
    "id": 4,
    "name": "What are my critical HQs?",
    "use": "Dynamic",
    "query": "SELECT h.Name AS HQ_Name, ROUND(COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.TRANSACTION_DATE) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_PART('MONTH', t.target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0), 2) AS \"Current_Month-3 Achievement_Percentage\", ROUND(COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.TRANSACTION_DATE) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_PART('MONTH', t.target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0), 2) AS \"Current_Month-2 Achievement_Percentage\", ROUND(COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.TRANSACTION_DATE) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_PART('MONTH', t.target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0), 2) AS \"Current_Month-1 Achievement_Percentage\", COALESCE((SUM(CASE WHEN DATE_PART('MONTH', s.TRANSACTION_DATE) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END) + SUM(CASE WHEN DATE_PART('MONTH', s.TRANSACTION_DATE) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END) + SUM(CASE WHEN DATE_PART('MONTH', s.TRANSACTION_DATE) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END)) / NULLIF(SUM(CASE WHEN DATE_PART('MONTH', t.target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN t.TARGET_UNITS ELSE 0 END) + SUM(CASE WHEN DATE_PART('MONTH', t.target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN t.TARGET_UNITS ELSE 0 END) + SUM(CASE WHEN DATE_PART('MONTH', t.target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0) AS Total_Achievement_Percentage FROM HQ h JOIN Sales s ON h.ID = s.HQID JOIN Target t ON h.ID = t.HQID AND s.SKUCODE = t.SKUCODE WHERE DATE_PART('MONTH', s.TRANSACTION_DATE) BETWEEN DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') AND DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('MONTH', t.target_date) BETWEEN DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') AND DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') GROUP BY h.Name HAVING COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.TRANSACTION_DATE) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_PART('MONTH', t.target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0) < 85 AND COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.TRANSACTION_DATE) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_PART('MONTH', t.target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0) < 85 AND COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.TRANSACTION_DATE) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_PART('MONTH', t.target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0) < 85 ORDER BY HQ_Name;",
    "questions": [
      "Which SKUs have performed below target for the critical HQ's For the last 3 months?",
      "Question 8?"
    ]
  },
  {
    "id": 4.1,
    "name": "Which SKUs have performed below target for the critical HQ's For the last 3 months?",
    "use": "Dynamic",
    "query": "SELECT h.Name AS \"HQ Name\", sku.Name AS \"SKU Name\", ROUND(COALESCE(SUM(CASE WHEN DATE_TRUNC('month', s.TRANSACTION_DATE) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_TRUNC('month', t.target_date) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month') THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0), 2) AS \"Two Months Ago Ach %\", ROUND(COALESCE(SUM(CASE WHEN DATE_TRUNC('month', s.TRANSACTION_DATE) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_TRUNC('month', t.target_date) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0), 2) AS \"Last Month Ach %\", ROUND(COALESCE(SUM(CASE WHEN DATE_TRUNC('month', s.TRANSACTION_DATE) = DATE_TRUNC('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_TRUNC('month', t.target_date) = DATE_TRUNC('month', CURRENT_DATE) THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0), 2) AS \"Current Month Ach %\", COALESCE((SUM(CASE WHEN DATE_TRUNC('month', s.TRANSACTION_DATE) BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month') AND DATE_TRUNC('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END)) / NULLIF(SUM(CASE WHEN DATE_TRUNC('month', t.target_date) BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month') AND DATE_TRUNC('month', CURRENT_DATE) THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0) AS Total_Achievement_Percentage FROM HQ h JOIN Sales s ON h.ID = s.HQID JOIN Target t ON h.ID = t.HQID AND s.SKUCODE = t.SKUCODE JOIN SKU sku ON s.SKUCODE = sku.Code WHERE s.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month') AND t.target_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month') GROUP BY h.Name, sku.Name HAVING COALESCE(SUM(CASE WHEN DATE_TRUNC('month', s.TRANSACTION_DATE) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_TRUNC('month', t.target_date) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month') THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0) < 85 OR COALESCE(SUM(CASE WHEN DATE_TRUNC('month', s.TRANSACTION_DATE) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_TRUNC('month', t.target_date) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0) < 85 OR COALESCE(SUM(CASE WHEN DATE_TRUNC('month', s.TRANSACTION_DATE) = DATE_TRUNC('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN DATE_TRUNC('month', t.target_date) = DATE_TRUNC('month', CURRENT_DATE) THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0) < 85 ORDER BY SUM(s.PRIMARY_SALES) DESC LIMIT 6;",
    "questions": ["Give me all the division", "Question 8?"]
  },
  {
    "id": 8,
    "name": "How many mid-month billing this month has occured as compared to the last 2 months trend",
    "query": "SELECT hq.NAME, COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth-1\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth-2\", t1.TARGET_VALUE AS \"Total Target CurrentMonth\", t2.TARGET_VALUE AS \"Total Target CurrentMonth-1\", t3.TARGET_VALUE AS \"Total Target CurrentMonth-2\", ROUND((COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) / NULLIF(t1.TARGET_VALUE, 0)) * 100, 2) AS \"Target Ach % CurrentMonth\", ROUND((COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') THEN s.primary_sales ELSE 0 END), 0) / NULLIF(t2.TARGET_VALUE, 0)) * 100, 2) AS \"Target Ach % CurrentMonth-1\", ROUND((COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') THEN s.primary_sales ELSE 0 END), 0) / NULLIF(t3.TARGET_VALUE, 0)) * 100, 2) AS \"Target Ach % CurrentMonth-2\" FROM HQ hq LEFT JOIN SALES s ON s.HQID = hq.id LEFT JOIN (SELECT HQID, SUM(TARGET_VALUE) AS TARGET_VALUE FROM TARGET WHERE DATE_PART('MONTH', target_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', target_date) = DATE_PART('YEAR', CURRENT_DATE) GROUP BY HQID) t1 ON t1.HQID = hq.ID LEFT JOIN (SELECT HQID, SUM(TARGET_VALUE) AS TARGET_VALUE FROM TARGET WHERE DATE_PART('MONTH', target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', target_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') GROUP BY HQID) t2 ON t2.HQID = hq.ID LEFT JOIN (SELECT HQID, SUM(TARGET_VALUE) AS TARGET_VALUE FROM TARGET WHERE DATE_PART('MONTH', target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', target_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') GROUP BY HQID) t3 ON t3.HQID = hq.ID WHERE (DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15) OR (DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month')) OR (DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months')) GROUP BY hq.NAME, t1.TARGET_VALUE, t2.TARGET_VALUE, t3.TARGET_VALUE ORDER BY hq.NAME;",
    "use": "Static",
    "questions": [
      "Which Stockist within these Headquarter are trailing?",
      "Would you like to compare the overall billing for the same stockists for the same time period?"
    ],
    "analytics": [
      {
        "type": "Bar Chart",
        "x-axis": "name",
        "y-axis": ["Total Target CurrentMonth-2"]
      },
      {
        "type": "Line Chart",
        "x-axis": "name",
        "y-axis": ["Target Ach % CurrentMonth-2"]
      }
    ]
  },
  {
    "id": 8.1,
    "name": "Which Stockist within these Headquarter are trailing?",
    "query": "SELECT  hq.NAME AS \"HQ Name\", st.NAME AS \"Stockist Name\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth-1\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth-2\" FROM SALES s JOIN HQ hq ON s.HQID = hq.ID JOIN STOCKIST st ON s.STOCKISTID = st.ID WHERE (DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15) OR (DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('DAY', s.transaction_date) <= 15) OR (DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('DAY', s.transaction_date) <= 15) AND hq.NAME LIKE '%TM HQ - Agartala%' GROUP BY s.HQID, hq.NAME, st.NAME HAVING COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) < GREATEST(COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0), COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0)) ORDER BY \"HQ Name\", \"Stockist Name\";",
    "use": "Dynamic",
    "questions": []
  },
  {
    "id": 9,
    "name": "Basis my past 3 months Mid-month Trend which stockists should I target and how much value?",
    "query": "SELECT hq.name AS \"HQ Name\", stockist.name AS \"Stockist Name\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN sales.primary_sales ELSE 0 END) AS \"Mid-month Current_Month-3\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN sales.primary_sales ELSE 0 END) AS \"Mid-month Current_Month-2\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN sales.primary_sales ELSE 0 END) AS \"Mid-month Current_Month-1\", ROUND((SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN sales.primary_sales ELSE 0 END)) / 3.0, 2) AS \"Average Last 3 Months Mid-month\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) THEN sales.primary_sales ELSE 0 END) AS \"Mid-month (Current Month)\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) THEN sales.primary_sales ELSE 0 END) - ROUND((SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN sales.primary_sales ELSE 0 END)) / 3.0, 2) AS \"Difference\" FROM sales JOIN hq ON sales.hqid = hq.id JOIN stockist ON sales.stockistid = stockist.id WHERE DATE_PART('day', sales.transaction_date) <= 15 AND hq.NAME = 'TM HQ - Agartala' GROUP BY hq.name, stockist.name, stockist.id HAVING SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) THEN sales.primary_sales ELSE 0 END) < ROUND((SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN sales.primary_sales ELSE 0 END)) / 3.0, 2) ORDER BY \"Difference\" ASC;",
    "use": "Static",
    "questions": [
      "Would you like to compare the overall billing for big/invest brands for the same stockist for the same time period?",
      "Would you like to see midmonth billing for your headquarter for the past 3 months"
    ]
  },
  {
    "id": 10,
    "name": "Which A class stockists are not billed for Clohex in the current month? ",
    "query": "SELECT s.name, h.name, SUM(CASE WHEN sa.transaction_date BETWEEN DATE_TRUNC('month', CURRENT_DATE) AND CURRENT_DATE THEN sa.primary_sales ELSE 0 END) AS \"Current Month\", SUM(CASE WHEN sa.transaction_date BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') + (CURRENT_DATE - DATE_TRUNC('day', CURRENT_DATE)) THEN sa.primary_sales ELSE 0 END) AS \"Last Month\", SUM(CASE WHEN sa.transaction_date BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 months') AND DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 months') + (CURRENT_DATE - DATE_TRUNC('day', CURRENT_DATE)) THEN sa.primary_sales ELSE 0 END) AS \"2 Months Ago\", SUM(CASE WHEN sa.transaction_date BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '3 months') AND DATE_TRUNC('month', CURRENT_DATE - INTERVAL '3 months') + (CURRENT_DATE - DATE_TRUNC('day', CURRENT_DATE)) THEN sa.primary_sales ELSE 0 END) AS \"3 Months Ago\", SUM(CASE WHEN sa.transaction_date BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '4 months') AND DATE_TRUNC('month', CURRENT_DATE - INTERVAL '4 months') + (CURRENT_DATE - DATE_TRUNC('day', CURRENT_DATE)) THEN sa.primary_sales ELSE 0 END) AS \"4 Months Ago\", SUM(CASE WHEN sa.transaction_date BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '5 months') AND DATE_TRUNC('month', CURRENT_DATE - INTERVAL '5 months') + (CURRENT_DATE - DATE_TRUNC('day', CURRENT_DATE)) THEN sa.primary_sales ELSE 0 END) AS \"5 Months Ago\", SUM(CASE WHEN sa.transaction_date BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '6 months') AND DATE_TRUNC('month', CURRENT_DATE - INTERVAL '6 months') + (CURRENT_DATE - DATE_TRUNC('day', CURRENT_DATE)) THEN sa.primary_sales ELSE 0 END) AS \"6 Months Ago\" FROM sales sa JOIN hq h ON sa.hqid = h.id JOIN stockist s ON sa.stockistid = s.id WHERE sa.transaction_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '6 months') GROUP BY s.name, h.name ORDER BY s.name, h.name LIMIT 5;",
    "use": "Dynamic",
    "questions": [
      "Give me all the hq?",
      "Would you like to compare the overall billing for the same stockists for the same time period?"
    ]
  },
  {
    "id": 10.1,
    "name": "What is the MTD trend for stockists?",
    "query": "SELECT st.id, st.Name AS \"Stockist Name\", h.Name AS \"HQ Name\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '0 month' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) + INTERVAL '1 month' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '1 month' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END) AS \"Month -1\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '2 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -2\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '3 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -3\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '4 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '3 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -4\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '5 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '4 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -5\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '6 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '5 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -6\" FROM Sales s JOIN Stockist st ON s.StockistID = st.ID JOIN HQ h ON s.HQID = h.ID WHERE s.TRANSACTION_DATE >= date_trunc('month', CURRENT_DATE) - INTERVAL '5 months' AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) + INTERVAL '1 month' GROUP BY st.Name, h.Name, st.id ORDER BY st.Name, h.Name;",
    "use": "Static",
    "questions": [
      "Give me all the hq?",
      "Would you like to compare the overall billing for the same stockists for the same time period?"
    ]
  },
  {
    "id": 11,
    "name": "What would be my HQ wise business plan for the month of Dec'24 based on my Q3 sales?",
    "query": "SELECT HQ.Name AS HQ_Name, COALESCE(SUM(S.Primary_Sales), 0) AS YTD_Sales, COALESCE(ROUND((SUM(S.Primary_Sales) * 100.0) / NULLIF(SUM(T.Target_Value), 0), 2), 0) AS YTD_Percentage_Achievement FROM (SELECT HQID, SKUCODE, DIVISIONCODE, SUM(Primary_Sales) AS Primary_Sales FROM Sales WHERE TRANSACTION_DATE BETWEEN CASE WHEN DATE_PART('month', CURRENT_DATE) >= 4 THEN DATE_TRUNC('year', CURRENT_DATE) + INTERVAL '3 months' ELSE DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '9 months' END AND CURRENT_DATE GROUP BY HQID, SKUCODE, DIVISIONCODE) S INNER JOIN (SELECT HQID, SKUCODE, DIVISIONCODE, SUM(Target_Value) AS Target_Value FROM Target WHERE Target_Date BETWEEN CASE WHEN DATE_PART('month', CURRENT_DATE) >= 4 THEN DATE_TRUNC('year', CURRENT_DATE) + INTERVAL '3 months' ELSE DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '9 months' END AND CURRENT_DATE GROUP BY HQID, SKUCODE, DIVISIONCODE) T ON S.HQID = T.HQID AND S.SKUCODE = T.SKUCODE AND S.DIVISIONCODE = T.DIVISIONCODE INNER JOIN HQ ON S.HQID = HQ.ID WHERE HQ.NAME = 'TM HQ - Agartala' GROUP BY HQ.ID, HQ.Name;",
    "use": "Static",
    "questions": [
      "Give me all the hq?",
      "Would you like to compare the overall billing for the same stockists for the same time period?"
    ]
  },
  {
    "id": 11.1,
    "name": "What would be my Siliguri HQ Brand wise plan for the month of Dec'24 to acheive his Q3 Target?",
    "query": "SELECT b.Name AS \"Brand Name\", COALESCE(SUM(S.Primary_Sales), 0) AS YTD_Sales, COALESCE(ROUND((SUM(S.Primary_Sales) * 100.0) / NULLIF(SUM(T.Target_Value), 0), 2), 0) AS YTD_Percentage_Achievement FROM (SELECT HQID, SKUCODE, DIVISIONCODE, SUM(Primary_Sales) AS Primary_Sales FROM Sales WHERE TRANSACTION_DATE BETWEEN CASE WHEN DATE_PART('month', CURRENT_DATE) >= 4 THEN DATE_TRUNC('year', CURRENT_DATE) + INTERVAL '3 months' ELSE DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '9 months' END AND CURRENT_DATE GROUP BY HQID, SKUCODE, DIVISIONCODE) S INNER JOIN (SELECT HQID, SKUCODE, DIVISIONCODE, SUM(Target_Value) AS Target_Value FROM Target WHERE Target_Date BETWEEN CASE WHEN DATE_PART('month', CURRENT_DATE) >= 4 THEN DATE_TRUNC('year', CURRENT_DATE) + INTERVAL '3 months' ELSE DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '9 months' END AND CURRENT_DATE GROUP BY HQID, SKUCODE, DIVISIONCODE) T ON S.HQID = T.HQID AND S.SKUCODE = T.SKUCODE AND S.DIVISIONCODE = T.DIVISIONCODE INNER JOIN BrandSKU bs ON s.SKUCODE = bs.SKUCode INNER JOIN Brand b ON bs.BrandID = b.ID INNER JOIN HQ ON S.HQID = HQ.ID WHERE HQ.NAME = 'TM HQ - Agartala' GROUP BY b.ID, b.Name;",
    "query2": "SELECT b.Name AS \"Brand Name\", SUM(s.PRIMARY_SALES) AS \"Current_Month-1 Sales\", SUM(s.PRIMARY_SALES) - COALESCE(SUM(t.TARGET_VALUE), 0) AS \"Quarterly Surplus/Deficit\", CASE WHEN COALESCE(SUM(t.TARGET_VALUE), 0) > 0 THEN ROUND((SUM(s.PRIMARY_SALES) * 100.0 / SUM(t.TARGET_VALUE)), 2) ELSE NULL END AS \"Quarterly % Ach.\", MAX(CASE WHEN date_part('month', t.target_date) = date_part('month', CURRENT_DATE) THEN t.TARGET_VALUE ELSE 0 END) AS \"Last_Month_Of_Quarter Target\" FROM Sales s LEFT JOIN Target t ON s.SKUCODE = t.SKUCODE AND s.DivisionCode = t.DivisionCode AND s.HQID = t.HQID AND date_part('year', s.TRANSACTION_DATE) = date_part('year', t.target_date) AND date_part('month', s.TRANSACTION_DATE) = date_part('month', t.target_date) INNER JOIN BrandSKU bs ON s.SKUCODE = bs.SKUCode INNER JOIN Brand b ON bs.BrandID = b.ID INNER JOIN HQ ON S.HQID = HQ.ID WHERE HQ.NAME = 'TM HQ - Agartala' AND date_part('quarter', s.TRANSACTION_DATE) = date_part('quarter', CURRENT_DATE) AND s.TRANSACTION_DATE <= CURRENT_DATE GROUP BY b.ID, b.Name;",
    "use": "Static",
    "questions": [
      "Give me all the hq?",
      "Would you like to compare the overall billing for the same stockists for the same time period?"
    ]
  },

  {
    "id": 12,
    "name": "What is week on week primary billing pattern for AllAhabad HQ for last 6 months?",
    "query": "SELECT TO_CHAR(DATE_TRUNC('month', s.transaction_date), 'YYYY-MM') AS month, EXTRACT(WEEK FROM s.transaction_date) - EXTRACT(WEEK FROM DATE_TRUNC('month', s.transaction_date)) + 1 AS week_number, SUM(s.primary_sales) AS weekly_sales, total_monthly_sales FROM sales s INNER JOIN hq ON s.hqid = hq.id INNER JOIN stockist ON s.stockistid = stockist.id INNER JOIN (SELECT DATE_TRUNC('month', sales.transaction_date) AS month_start, SUM(sales.primary_sales) AS total_monthly_sales FROM sales INNER JOIN hq ON sales.hqid = hq.id INNER JOIN stockist ON sales.stockistid = stockist.id WHERE hq.name = 'TM HQ - Pune' AND sales.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 months' GROUP BY DATE_TRUNC('month', sales.transaction_date)) monthly_totals ON DATE_TRUNC('month', s.transaction_date) = monthly_totals.month_start WHERE hq.name = 'TM HQ - Pune' AND s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 months' GROUP BY month, week_number, total_monthly_sales ORDER BY month, week_number;",
    "use": "Dynamic",
    "questions": [
      "Give me all the hq?",
      "Would you like to compare the overall billing for the same stockists for the same time period?"
    ]
  },
  {
    "id": 13,
    "name": "Which account is giving me drop in MEDVOL Channel when compared to Last 3 month Avg ?",
    "query": "SELECT * FROM (SELECT hq.name AS hq_name, stockist.name AS stockist_name, SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) AS sales_last_month, SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.primary_sales ELSE 0 END) AS sales_two_months_ago, SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.primary_sales ELSE 0 END) AS sales_three_months_ago, AVG(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE NULL END) AS avg_sales_last_three_months, SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) AS current_month_sales, SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) - AVG(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE NULL END) AS sales_difference FROM sales s JOIN hq ON s.hqid = hq.id JOIN stockist ON s.stockistid = stockist.id WHERE s.status = 'MEDVOL' AND s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' GROUP BY hq.name, stockist.name HAVING SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) < AVG(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE NULL END)) AS subquery ORDER BY sales_difference limit 5;",
    "use": "Static",
    "questions": [
      "Give me all the hq?",
      "Would you like to compare the overall billing for the same stockists for the same time period?"
    ]
  },
  {
    "id": 14,
    "name": "Billing for which sku %%sku_name%% Inj was lesser in November as compared to previous 3 months?",
    "query": "SELECT st.name AS Stockist_Name, h.name AS HQ_Name, SUM(CASE WHEN EXTRACT(MONTH FROM s.transaction_date) = 8 AND EXTRACT(YEAR FROM s.transaction_date) = 2024 THEN s.primary_sales ELSE 0 END) AS primarysales_Aug_24, SUM(CASE WHEN EXTRACT(MONTH FROM s.transaction_date) = 9 AND EXTRACT(YEAR FROM s.transaction_date) = 2024 THEN s.primary_sales ELSE 0 END) AS primarysales_Sep_24, SUM(CASE WHEN EXTRACT(MONTH FROM s.transaction_date) = 10 AND EXTRACT(YEAR FROM s.transaction_date) = 2024 THEN s.primary_sales ELSE 0 END) AS primarysales_Oct_24, AVG(CASE WHEN EXTRACT(MONTH FROM s.transaction_date) IN (8, 9, 10) AND EXTRACT(YEAR FROM s.transaction_date) = 2024 THEN s.primary_sales ELSE NULL END) AS primarysales_Avg_Last_3_Months, SUM(CASE WHEN EXTRACT(MONTH FROM s.transaction_date) = 11 AND EXTRACT(YEAR FROM s.transaction_date) = 2024 THEN s.primary_sales ELSE 0 END) AS primarysales_Nov_24, SUM(CASE WHEN EXTRACT(MONTH FROM s.transaction_date) = 11 AND EXTRACT(YEAR FROM s.transaction_date) = 2024 THEN s.primary_sales ELSE 0 END) - AVG(CASE WHEN EXTRACT(MONTH FROM s.transaction_date) IN (8, 9, 10) AND EXTRACT(YEAR FROM s.transaction_date) = 2024 THEN s.primary_sales ELSE NULL END) AS Difference_in_billing FROM sales s JOIN stockist st ON s.stockistid = st.id JOIN hq h ON s.hqid = h.id GROUP BY st.id, h.id HAVING SUM(CASE WHEN EXTRACT(MONTH FROM s.transaction_date) = 11 AND EXTRACT(YEAR FROM s.transaction_date) = 2024 THEN s.primary_sales ELSE 0 END) < AVG(CASE WHEN EXTRACT(MONTH FROM s.transaction_date) IN (8, 9, 10) AND EXTRACT(YEAR FROM s.transaction_date) = 2024 THEN s.primary_sales ELSE NULL END) ORDER BY Difference_in_billing DESC;",
    "use": "Dynamic",
    "questions": [
      "Would you like to compare the overall billing for the same stockists for the same time period?",
      "Give me all the division"
    ]
  },
  {
    "id": 14.1,
    "name": "Would you like to compare the overall billing for the same stockists for the same time period?",
    "query": "SELECT st.Name AS \"Stockist Name\", hq.Name AS \"HQ Name\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month-3\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month-2\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month-1\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month\", ROUND(((SELECT COALESCE(SUM(s1.PRIMARY_SALES), 0) FROM Sales s1 WHERE DATE_PART('month', s1.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month')) + (SELECT COALESCE(SUM(s2.PRIMARY_SALES), 0) FROM Sales s2 WHERE DATE_PART('month', s2.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month')) + (SELECT COALESCE(SUM(s3.PRIMARY_SALES), 0) FROM Sales s3 WHERE DATE_PART('month', s3.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month'))) / 3, 2) AS \"Average_Primary Sales Last_3_Months\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END) - ((SELECT COALESCE(SUM(s1.PRIMARY_SALES), 0) FROM Sales s1 WHERE DATE_PART('month', s1.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month')) + (SELECT COALESCE(SUM(s2.PRIMARY_SALES), 0) FROM Sales s2 WHERE DATE_PART('month', s2.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month')) + (SELECT COALESCE(SUM(s3.PRIMARY_SALES), 0) FROM Sales s3 WHERE DATE_PART('month', s3.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month'))) / 3, 2) AS Difference_In_Billing FROM Sales s JOIN Stockist st ON s.StockistID = st.ID JOIN HQ hq ON s.HQID = hq.ID JOIN BrandSKU bs ON s.SKUCODE = bs.SKUCode JOIN Brand b ON bs.BrandID = b.ID WHERE b.Name = 'KETOROL INJ' GROUP BY st.Name, hq.Name HAVING ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END), 2) < ROUND(((SELECT COALESCE(SUM(s1.PRIMARY_SALES), 0) FROM Sales s1 WHERE DATE_PART('month', s1.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month')) + (SELECT COALESCE(SUM(s2.PRIMARY_SALES), 0) FROM Sales s2 WHERE DATE_PART('month', s2.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month')) + (SELECT COALESCE(SUM(s3.PRIMARY_SALES), 0) FROM Sales s3 WHERE DATE_PART('month', s3.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month'))) / 3, 2) ORDER BY Difference_In_Billing;",
    "use": "Dynamic",
    "questions": [
      "Would you like to compare the overall billing for the same stockists for the same time period?",
      "Give me all the division"
    ]
  },
  {
    "id": 1737034988669,
    "name": "fetch the highest performing hq",
    "query": "An error occurred:   You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.  You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface.   Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`  A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742 "
  }
]
