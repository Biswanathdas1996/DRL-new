[
  {
    "id": 0.1,
    "questions": [],
    "hide": true,
    "name": "Give me my total sales and total target for ***** ",
    "use": "Dynamic",
    "query": "SELECT TO_CHAR(COALESCE(sales_data.month, target_data.month), 'Month') AS \"Month\", hq.name AS \"HQ Name\", COALESCE(SUM(sales_data.primary_sales), 0) AS \"Total Sales\", COALESCE(SUM(target_data.target_value), 0) AS \"Total Target\" FROM (SELECT hq_id, sku_code, DATE_TRUNC('month', transaction_date) AS MONTH, SUM(primary_sales) AS primary_sales FROM Sales WHERE transaction_date >= 'Enter start date'::DATE AND transaction_date < 'Enter end date'::DATE AND hq_id IN ('Hq_ids') GROUP BY hq_id, sku_code, MONTH) sales_data FULL OUTER JOIN (SELECT hq_id, sku_code, DATE_TRUNC('month', target_date) AS MONTH, SUM(target_value) AS target_value FROM Target WHERE target_date >= 'Enter start date'::DATE AND target_date < 'Enter start date'::DATE AND hq_id IN ('Hq_ids') GROUP BY hq_id, sku_code, MONTH) target_data ON sales_data.hq_id = target_data.hq_id AND sales_data.sku_code = target_data.sku_code AND sales_data.month = target_data.month JOIN HQ hq ON COALESCE(sales_data.hq_id, target_data.hq_id) = hq.id GROUP BY COALESCE(sales_data.month, target_data.month), hq.id, hq.name HAVING SUM(sales_data.primary_sales) IS NOT NULL OR SUM(target_data.target_value) IS NOT NULL ORDER BY COALESCE(sales_data.month, target_data.month), hq.name;"
  },
  {
    "id": 1,
    "questions": [],
    "hide": true,
    "name": "What is the Total Sales , Total Target, %Achievement for Brand Category: \"****\" for ***** month",
    "use": "Dynamic",
    "query": "SELECT TO_CHAR(COALESCE(sales_data.month, target_data.month), 'Month') AS \"Month\", hq.name AS \"HQ Name\", COALESCE(SUM(sales_data.primary_sales), 0) AS \"Total Sales\", COALESCE(SUM(target_data.target_value), 0) AS \"Total Target\", ROUND((COALESCE(SUM(sales_data.primary_sales), 0) / NULLIF(SUM(target_data.target_value), 0)) * 100, 2) AS \"Sales Achievement %\" FROM (SELECT hq_id, sku_code, DATE_TRUNC('month', transaction_date) AS month, SUM(primary_sales) AS primary_sales FROM Sales WHERE transaction_date BETWEEN '{{start_date}}' AND '{{end_date}}' GROUP BY hq_id, sku_code, month) sales_data FULL OUTER JOIN (SELECT hq_id, sku_code, DATE_TRUNC('month', target_date) AS month, SUM(target_value) AS target_value FROM Target WHERE target_date BETWEEN '{{start_date}}' AND '{{end_date}}' GROUP BY hq_id, sku_code, month) target_data ON sales_data.hq_id = target_data.hq_id AND sales_data.sku_code = target_data.sku_code AND sales_data.month = target_data.month JOIN HQ hq ON COALESCE(sales_data.hq_id, target_data.hq_id) = hq.id INNER JOIN brandskumap ON sales_data.sku_code = brandskumap.sku_code INNER JOIN brand ON brandskumap.brand_id = brand.id WHERE LOWER(brand.category) LIKE LOWER('%{{brand_category}}%') GROUP BY COALESCE(sales_data.month, target_data.month), hq.id, hq.name HAVING SUM(sales_data.primary_sales) IS NOT NULL OR SUM(target_data.target_value) IS NOT NULL ORDER BY COALESCE(sales_data.month, target_data.month), hq.name;"
  },
  {
    "id": 2,
    "use": "Dynamic",
    "questions": [],
    "hide": true,
    "name": "What is the %Total Sales Value, Sales Return Value , % Returns for brand **Name*** for ****** and **** for HQ",
    "query": "SELECT TO_CHAR(DATE_TRUNC('month', s.TRANSACTION_DATE), 'Month') AS month, SUM(s.PRIMARY_SALES) AS primary_sales, SUM(CASE WHEN s.status = 'Returns' THEN s.PRIMARY_SALES ELSE 0 END) AS sales_return_value, ROUND((SUM(CASE WHEN s.status = 'Returns' THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(s.PRIMARY_SALES), 0)) * 100, 2) AS sales_return_percentage FROM Sales s JOIN HQ h ON s.HQ_ID = h.ID JOIN BrandSKUMap bsku ON s.SKU_CODE = bsku.SKU_Code JOIN Brand b ON bsku.Brand_ID = b.ID WHERE LOWER(h.Name) LIKE LOWER('%{{hq_name}}%') AND LOWER(b.Name) = LOWER('{{brand_name}}') AND s.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '{{months}} months' GROUP BY DATE_TRUNC('month', s.TRANSACTION_DATE) ORDER BY DATE_TRUNC('month', s.TRANSACTION_DATE);"
  },
  {
    "id": 3,
    "use": "Dynamic",
    "hide": true,
    "questions": [],
    "name": "Give the name of stockiest who have Total Sales Value, Sales Return Value , %Return in ***** for brand ******",
    "query": "SELECT s.name AS \"Stockist Name\", SUM(sa.primary_sales) FILTER (WHERE sa.primary_sales < 0 AND DATE_PART('month', sa.transaction_date) = {{month}} AND DATE_PART('year', sa.transaction_date) = {{year}}) AS \"Sales Return Value\", SUM(sa.primary_sales) FILTER (WHERE sa.primary_sales >= 0 AND DATE_PART('month', sa.transaction_date) = {{month}} AND DATE_PART('year', sa.transaction_date) = {{year}}) AS \"Total Sales Value\", CASE WHEN SUM(sa.primary_sales) FILTER (WHERE sa.primary_sales >= 0 AND DATE_PART('month', sa.transaction_date) = {{month}} AND DATE_PART('year', sa.transaction_date) = {{year}}) = 0 THEN 0 ELSE ROUND((SUM(sa.primary_sales) FILTER (WHERE sa.primary_sales < 0 AND DATE_PART('month', sa.transaction_date) = {{month}} AND DATE_PART('year', sa.transaction_date) = {{year}}) / SUM(sa.primary_sales) FILTER (WHERE sa.primary_sales >= 0 AND DATE_PART('month', sa.transaction_date) = {{month}} AND DATE_PART('year', sa.transaction_date) = {{year}})) * 100, 2) END AS \"%Return\" FROM sales sa JOIN stockist s ON sa.stockist_id = s.id JOIN brandskumap bsm ON sa.sku_code = bsm.sku_code JOIN brand b ON bsm.brand_id = b.id WHERE LOWER(b.name) = LOWER('{{brand_name}}') AND sa.hq_id IN ({{hq_ids}}) GROUP BY s.name HAVING SUM(sa.primary_sales) FILTER (WHERE sa.primary_sales < 0 AND DATE_PART('month', sa.transaction_date) = {{month}} AND DATE_PART('year', sa.transaction_date) = {{year}}) IS NOT NULL;"
  },
  {
    "id": 3.1,
    "use": "Dynamic",
    "hide": true,
    "questions": [],
    "name": "Which Stockist have given recorded Total Sales Value, Sales Return Value , %Return for *******",
    "query": "SELECT s.name AS \"Stockist Name\", SUM(sa.primary_sales) FILTER (WHERE sa.primary_sales < 0 AND DATE_PART('month', sa.transaction_date) = {{month}} AND DATE_PART('year', sa.transaction_date) = {{year}}) AS \"Sales Return Value\", SUM(sa.primary_sales) FILTER (WHERE sa.primary_sales >= 0 AND DATE_PART('month', sa.transaction_date) = {{month}} AND DATE_PART('year', sa.transaction_date) = {{year}}) AS \"Total Sales Value\", CASE WHEN SUM(sa.primary_sales) FILTER (WHERE sa.primary_sales >= 0 AND DATE_PART('month', sa.transaction_date) = {{month}} AND DATE_PART('year', sa.transaction_date) = {{year}}) = 0 THEN 0 ELSE ROUND((SUM(sa.primary_sales) FILTER (WHERE sa.primary_sales < 0 AND DATE_PART('month', sa.transaction_date) = {{month}} AND DATE_PART('year', sa.transaction_date) = {{year}}) / SUM(sa.primary_sales) FILTER (WHERE sa.primary_sales >= 0 AND DATE_PART('month', sa.transaction_date) = {{month}} AND DATE_PART('year', sa.transaction_date) = {{year}})) * 100, 2) END AS \"%Return\" FROM sales sa JOIN stockist s ON sa.stockist_id = s.id JOIN brandskumap bsm ON sa.sku_code = bsm.sku_code JOIN brand b ON bsm.brand_id = b.id WHERE LOWER(b.name) = LOWER('{{brand_name}}') AND sa.hq_id IN ({{hq_ids}}) GROUP BY s.name HAVING SUM(sa.primary_sales) FILTER (WHERE sa.primary_sales < 0 AND DATE_PART('month', sa.transaction_date) = {{month}} AND DATE_PART('year', sa.transaction_date) = {{year}}) IS NOT NULL;"
  },
  {
    "id": 4,
    "use": "Dynamic",
    "hide": true,
    "questions": [],
    "name": "what was my Total Sales , Total Target, %Achievement for ***** month",
    "query": "SELECT TO_CHAR(COALESCE(sales_data.month, target_data.month), 'Month') AS \"Month\", hq.name AS \"HQ Name\", COALESCE(SUM(sales_data.primary_sales), 0) AS \"Total Sales\", COALESCE(SUM(target_data.target_value), 0) AS \"Total Target\", ROUND((COALESCE(SUM(sales_data.primary_sales), 0) / NULLIF(SUM(target_data.target_value), 0)) * 100, 2) AS \"Sales Achievement %\" FROM (SELECT hq_id, sku_code, DATE_TRUNC('month', transaction_date) AS month, SUM(primary_sales) AS primary_sales FROM Sales WHERE transaction_date >= '{{start_date}}'::DATE AND transaction_date < '{{end_date}}'::DATE AND hq_id IN ({{hq_ids}}) GROUP BY hq_id, sku_code, month) sales_data FULL OUTER JOIN (SELECT hq_id, sku_code, DATE_TRUNC('month', target_date) AS month, SUM(target_value) AS target_value FROM Target WHERE target_date >= '{{start_date}}'::DATE AND target_date < '{{end_date}}'::DATE AND hq_id IN ({{hq_ids}}) GROUP BY hq_id, sku_code, month) target_data ON sales_data.hq_id = target_data.hq_id AND sales_data.sku_code = target_data.sku_code AND sales_data.month = target_data.month JOIN HQ hq ON COALESCE(sales_data.hq_id, target_data.hq_id) = hq.id GROUP BY COALESCE(sales_data.month, target_data.month), hq.id, hq.name HAVING SUM(sales_data.primary_sales) IS NOT NULL OR SUM(target_data.target_value) IS NOT NULL ORDER BY COALESCE(sales_data.month, target_data.month), hq.name;"
  },

  {
    "id": 5,
    "use": "Dynamic",
    "hide": true,
    "questions": [],
    "name": "Give me the Total Sales , Total Target, %Achievement of brands where sales surplus/deficit than the target for all HQ for *****",
    "query": "SELECT brand.id, brand.Name AS \"Brand Name\", COALESCE(SUM(s.PRIMARY_SALES), 0) - COALESCE(SUM(t.TARGET_VALUE), 0) AS \"Quarterly Surplus/ Deficit\", CASE WHEN COALESCE(SUM(t.TARGET_VALUE), 0) > 0 THEN ROUND((COALESCE(SUM(s.PRIMARY_SALES), 0) * 100.0 / COALESCE(SUM(t.TARGET_VALUE), 0)), 2) ELSE 0.00 END AS \"Quarterly % Ach.\", COALESCE(SUM(t.TARGET_VALUE), 0) AS \"Quarterly Total Target\" FROM (SELECT hq_id::text, sku_code, SUM(primary_sales) AS primary_sales FROM Sales WHERE TRANSACTION_DATE <= CURRENT_DATE AND date_part('quarter', TRANSACTION_DATE) = date_part('quarter', CURRENT_DATE - interval '3 months') AND hq_id IN ({{hq_ids}}) GROUP BY hq_id, sku_code) s FULL OUTER JOIN (SELECT hq_id::text, sku_code, SUM(target_value) AS target_value FROM Target WHERE date_part('quarter', TARGET_DATE) = date_part('quarter', CURRENT_DATE - interval '3 months') AND hq_id IN ({{hq_ids}}) GROUP BY hq_id, sku_code) t ON s.hq_id = t.hq_id AND s.sku_code = t.sku_code JOIN HQ hq ON COALESCE(s.hq_id, t.hq_id) = hq.id INNER JOIN brandskumap ON COALESCE(s.sku_code, t.sku_code) = brandskumap.sku_code INNER JOIN brand ON brandskumap.brand_id = brand.id GROUP BY brand.id, brand.name ORDER BY brand.name;"
  },
  {
    "id": 5.1,
    "use": "Dynamic",
    "hide": true,
    "questions": [],
    "name": "Give me list of Brands where the sales surplus/deficit than the target for all HQ for ***** ",
    "query": "SELECT brand.id, brand.Name AS \"Brand Name\", COALESCE(SUM(s.PRIMARY_SALES), 0) - COALESCE(SUM(t.TARGET_VALUE), 0) AS \"Quarterly Surplus/ Deficit\", CASE WHEN COALESCE(SUM(t.TARGET_VALUE), 0) > 0 THEN ROUND((COALESCE(SUM(s.PRIMARY_SALES), 0) * 100.0 / COALESCE(SUM(t.TARGET_VALUE), 0)), 2) ELSE 0.00 END AS \"Quarterly % Ach.\", COALESCE(SUM(t.TARGET_VALUE), 0) AS \"Quarterly Total Target\" FROM (SELECT hq_id::text, sku_code, SUM(primary_sales) AS primary_sales FROM Sales WHERE TRANSACTION_DATE BETWEEN '{{start_date}}'::DATE AND '{{end_date}}'::DATE AND hq_id IN ({{hq_ids}}) GROUP BY hq_id, sku_code) s FULL OUTER JOIN (SELECT hq_id::text, sku_code, SUM(target_value) AS target_value FROM Target WHERE TARGET_DATE BETWEEN '{{start_date}}'::DATE AND '{{end_date}}'::DATE AND hq_id IN ({{hq_ids}}) GROUP BY hq_id, sku_code) t ON s.hq_id = t.hq_id AND s.sku_code = t.sku_code JOIN HQ hq ON COALESCE(s.hq_id, t.hq_id) = hq.id INNER JOIN brandskumap ON COALESCE(s.sku_code, t.sku_code) = brandskumap.sku_code INNER JOIN brand ON brandskumap.brand_id = brand.id GROUP BY brand.id, brand.name ORDER BY brand.name;"
  },
  {
    "id": 6,
    "use": "Dynamic",
    "hide": true,
    "questions": [],
    "name": "What are my critical hq",
    "query": "SELECT hq.Name AS HQ_Name, ROUND(COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', '{{month_3}}'::DATE) THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', '{{month_3}}'::DATE) THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0), 2) AS \"Current_Month-3 Achievement_Percentage\", ROUND(COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', '{{month_2}}'::DATE) THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', '{{month_2}}'::DATE) THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0), 2) AS \"Current_Month-2 Achievement_Percentage\", ROUND(COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', '{{month_1}}'::DATE) THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', '{{month_1}}'::DATE) THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0), 2) AS \"Current_Month-1 Achievement_Percentage\", ROUND(COALESCE((SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', '{{month_3}}'::DATE) THEN s.PRIMARY_SALES ELSE 0 END) + SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', '{{month_2}}'::DATE) THEN s.PRIMARY_SALES ELSE 0 END) + SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', '{{month_1}}'::DATE) THEN s.PRIMARY_SALES ELSE 0 END)) / NULLIF((SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', '{{month_3}}'::DATE) THEN t.TARGET_UNITS ELSE 0 END) + SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', '{{month_2}}'::DATE) THEN t.TARGET_UNITS ELSE 0 END) + SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', '{{month_1}}'::DATE) THEN t.TARGET_UNITS ELSE 0 END)), 0) * 100, 0), 2) AS Total_Achievement_Percentage FROM (SELECT hq_id, sku_code, DATE_PART('MONTH', TRANSACTION_DATE) AS MONTH_NUM, SUM(primary_sales) AS PRIMARY_SALES FROM Sales WHERE TRANSACTION_DATE >= DATE_TRUNC('MONTH', '{{month_3}}'::DATE) AND TRANSACTION_DATE < DATE_TRUNC('MONTH', '{{current_month}}'::DATE) GROUP BY hq_id, sku_code, DATE_PART('MONTH', TRANSACTION_DATE)) s FULL OUTER JOIN (SELECT hq_id, sku_code, DATE_PART('MONTH', target_date) AS MONTH_NUM, SUM(target_units) AS TARGET_UNITS FROM Target WHERE target_date >= DATE_TRUNC('MONTH', '{{month_3}}'::DATE) AND target_date < DATE_TRUNC('MONTH', '{{current_month}}'::DATE) GROUP BY hq_id, sku_code, DATE_PART('MONTH', target_date)) t ON s.hq_id = t.hq_id AND s.sku_code = t.sku_code AND s.MONTH_NUM = t.MONTH_NUM JOIN HQ hq ON COALESCE(s.hq_id, t.hq_id) = hq.id WHERE hq.Name <> 'unknown' GROUP BY hq.Name HAVING COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', '{{month_3}}'::DATE) THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', '{{month_3}}'::DATE) THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0) < 85 AND COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', '{{month_2}}'::DATE) THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', '{{month_2}}'::DATE) THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0) < 85 AND COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', '{{month_1}}'::DATE) THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', '{{month_1}}'::DATE) THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0) < 85 ORDER BY HQ_Name;"
  },
  {
    "id": 7,
    "use": "Dynamic",
    "hide": true,
    "questions": [],
    "name": "Which brands have performed below target for the Critical area for the last {enter month} months.",
    "query": "SELECT sk.Name AS \"SKUs\", ROUND(COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', '{{start_date}}'::DATE) THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', '{{start_date}}'::DATE) THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0), 2) AS \"Start_Month Achievement_Percentage\", ROUND(COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', '{{mid_date}}'::DATE) THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', '{{mid_date}}'::DATE) THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0), 2) AS \"Mid_Month Achievement_Percentage\", ROUND(COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', '{{end_date}}'::DATE) THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', '{{end_date}}'::DATE) THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0), 2) AS \"End_Month Achievement_Percentage\", ROUND(COALESCE((SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', '{{start_date}}'::DATE) THEN s.PRIMARY_SALES ELSE 0 END) + SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', '{{mid_date}}'::DATE) THEN s.PRIMARY_SALES ELSE 0 END) + SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', '{{end_date}}'::DATE) THEN s.PRIMARY_SALES ELSE 0 END)) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', '{{start_date}}'::DATE) THEN t.TARGET_VALUE ELSE 0 END) + SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', '{{mid_date}}'::DATE) THEN t.TARGET_VALUE ELSE 0 END) + SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', '{{end_date}}'::DATE) THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0), 2) AS Total_Achievement_Percentage FROM (SELECT hq_id, sku_code, DATE_PART('MONTH', TRANSACTION_DATE) AS MONTH_NUM, SUM(primary_sales) AS PRIMARY_SALES FROM Sales WHERE TRANSACTION_DATE BETWEEN '{{start_date}}'::DATE AND '{{end_date}}'::DATE GROUP BY hq_id, sku_code, DATE_PART('MONTH', TRANSACTION_DATE)) s FULL OUTER JOIN (SELECT hq_id, sku_code, DATE_PART('MONTH', target_date) AS MONTH_NUM, SUM(target_value) AS TARGET_VALUE FROM Target WHERE target_date BETWEEN '{{start_date}}'::DATE AND '{{end_date}}'::DATE GROUP BY hq_id, sku_code, DATE_PART('MONTH', target_date)) t ON s.hq_id = t.hq_id AND s.sku_code = t.sku_code AND s.MONTH_NUM = t.MONTH_NUM JOIN HQ hq ON COALESCE(s.hq_id, t.hq_id) = hq.id INNER JOIN brandskumap ON s.sku_code = brandskumap.sku_code INNER JOIN sku sk ON brandskumap.sku_code = sk.code WHERE hq.Name <> 'unknown' GROUP BY sk.Name HAVING COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', '{{start_date}}'::DATE) THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', '{{start_date}}'::DATE) THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0) < 85 AND COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', '{{mid_date}}'::DATE) THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', '{{mid_date}}'::DATE) THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0) < 85 AND COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', '{{end_date}}'::DATE) THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', '{{end_date}}'::DATE) THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0) < 85 ORDER BY sk.Name;"
  },
  {
    "id": 8,
    "use": "Dynamic",
    "hide": true,
    "questions": [],
    "name": "What is the monthwise  mid month Total Sales , Total Target, %Achievement from ****** to ******",
    "query": "SELECT hq.NAME, COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth-1\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth-2\", t1.TARGET_VALUE AS \"Total Target CurrentMonth\", t2.TARGET_VALUE AS \"Total Target CurrentMonth-1\", t3.TARGET_VALUE AS \"Total Target CurrentMonth-2\", ROUND((COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) / NULLIF(t1.TARGET_VALUE, 0)) * 100, 2) AS \"Mid-month Target Ach % CurrentMonth\", ROUND((COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') THEN s.primary_sales ELSE 0 END), 0) / NULLIF(t2.TARGET_VALUE, 0)) * 100, 2) AS \"Mid-month Target Ach % CurrentMonth-1\", ROUND((COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') THEN s.primary_sales ELSE 0 END), 0) / NULLIF(t3.TARGET_VALUE, 0)) * 100, 2) AS \"Mid-month Target Ach % CurrentMonth-2\" FROM HQ hq LEFT JOIN SALES s ON s.HQ_ID = hq.id LEFT JOIN (SELECT HQ_ID, SUM(TARGET_VALUE) AS TARGET_VALUE FROM TARGET WHERE DATE_PART('MONTH', target_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', target_date) = DATE_PART('YEAR', CURRENT_DATE) GROUP BY HQ_ID) t1 ON t1.HQ_ID = hq.ID LEFT JOIN (SELECT HQ_ID, SUM(TARGET_VALUE) AS TARGET_VALUE FROM TARGET WHERE DATE_PART('MONTH', target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', target_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') GROUP BY HQ_ID) t2 ON t2.HQ_ID = hq.ID LEFT JOIN (SELECT HQ_ID, SUM(TARGET_VALUE) AS TARGET_VALUE FROM TARGET WHERE DATE_PART('MONTH', target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', target_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') GROUP BY HQ_ID) t3 ON t3.HQ_ID = hq.ID WHERE ((DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15) OR (DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month')) OR (DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months'))) GROUP BY hq.NAME, t1.TARGET_VALUE, t2.TARGET_VALUE, t3.TARGET_VALUE ORDER BY hq.NAME;"
  },
  {
    "id": 8.2,
    "use": "Dynamic",
    "hide": true,
    "questions": [],
    "name": "Give me the name of HQ where my mid-month Total Sales , Total Target, %Achievement for ****** , is less than ******",
    "query": "SELECT hq.NAME, COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = {month} AND DATE_PART('YEAR', s.transaction_date) = {year} AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month Oct 2024\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = {month} AND DATE_PART('YEAR', s.transaction_date) = {year} AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month Nov 2024\", t1.TARGET_VALUE AS \"Total Target Oct 2024\", t2.TARGET_VALUE AS \"Total Target Nov 2024\", ROUND((COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = {month} AND DATE_PART('YEAR', s.transaction_date) = {year} AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) / NULLIF(t1.TARGET_VALUE, 0)) * 100, 2) AS \"Mid-month Target Ach % Oct 2024\", ROUND((COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = {month} AND DATE_PART('YEAR', s.transaction_date) = {year} AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) / NULLIF(t2.TARGET_VALUE, 0)) * 100, 2) AS \"Mid-month Target Ach % month 2024\" FROM HQ hq LEFT JOIN SALES s ON s.HQ_ID = hq.id LEFT JOIN (SELECT HQ_ID, SUM(TARGET_VALUE) AS TARGET_VALUE FROM TARGET WHERE DATE_PART('MONTH', target_date) = {month} AND DATE_PART('YEAR', target_date) = {year} GROUP BY HQ_ID) t1 ON t1.HQ_ID = hq.ID LEFT JOIN (SELECT HQ_ID, SUM(TARGET_VALUE) AS TARGET_VALUE FROM TARGET WHERE DATE_PART('MONTH', target_date) = {month} AND DATE_PART('YEAR', target_date) = {year} GROUP BY HQ_ID) t2 ON t2.HQ_ID = hq.ID GROUP BY hq.NAME, t1.TARGET_VALUE, t2.TARGET_VALUE HAVING ROUND((COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = month AND DATE_PART('YEAR', s.transaction_date) = year AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) / NULLIF(t1.TARGET_VALUE, 0)) * 100, 2) < %less than AND ROUND((COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = month AND DATE_PART('YEAR', s.transaction_date) = year AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) / NULLIF(t2.TARGET_VALUE, 0)) * 100, 2) < %less than ORDER BY hq.NAME;"
  },
  {
    "id": 9,
    "use": "Dynamic",
    "hide": true,
    "questions": [],
    "name": "Which Stockist within HQ ****** are having sales for {******} mid-month less than the average of {******} mid-month sales.",
    "query": "SELECT hq.NAME AS \"HQ Name\", st.NAME AS \"Stockist Name\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth-1\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth-2\" FROM SALES s JOIN HQ hq ON s.HQ_ID = hq.ID JOIN STOCKIST st ON s.STOCKIST_ID = st.ID WHERE ((DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15) OR (DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('DAY', s.transaction_date) <= 15) OR (DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('DAY', s.transaction_date) <= 15)) AND hq.NAME LIKE '%Enter hq name%' GROUP BY s.HQ_ID, hq.NAME, st.NAME HAVING COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) < GREATEST(COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0), COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0)) ORDER BY \"HQ Name\", \"Stockist Name\";"
  },
  {
    "id": 10,
    "use": "Dynamic",
    "hide": true,
    "questions": [],
    "name": "Which HQ are having mid-month sales for ****** less than the average mid-month sales of ****** ",
    "query": "SELECT hq.name AS \"HQ Name\", stockist.name AS \"Stockist Name\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN sales.primary_sales ELSE 0 END) AS \"Mid-month Current_Month-3\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN sales.primary_sales ELSE 0 END) AS \"Mid-month Current_Month-2\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN sales.primary_sales ELSE 0 END) AS \"Mid-month Current_Month-1\", ROUND((SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN sales.primary_sales ELSE 0 END)) / 3.0, 2) AS \"Average Last 3 Months Mid-month\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) THEN sales.primary_sales ELSE 0 END) AS \"Mid-month (Current Month)\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) THEN sales.primary_sales ELSE 0 END) - ROUND((SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN sales.primary_sales ELSE 0 END)) / 3.0, 2) AS \"Difference\" FROM sales JOIN hq ON sales.hq_id = hq.id JOIN stockist ON sales.stockist_id = stockist.id WHERE DATE_PART('day', sales.transaction_date) <= 15 AND hq.NAME LIKE '%Enter hq name%' GROUP BY hq.name, stockist.name, stockist.id HAVING SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) THEN sales.primary_sales ELSE 0 END) < ROUND((SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN sales.primary_sales ELSE 0 END)) / 3.0, 2) ORDER BY \"Difference\" ASC;"
  },
  {
    "id": 11,
    "use": "Dynamic",
    "hide": true,
    "questions": [],
    "name": "What is the sales for all Stockist for  HQ ****** for ******, grouped month-wise ",
    "query": "SELECT st.Name AS \"Stockist Name\", h.Name AS \"HQ Name\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '0 month' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) + INTERVAL '1 month' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '1 month' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -1\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '2 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -2\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '3 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -3\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '4 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '3 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -4\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '5 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '4 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -5\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '6 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '5 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -6\" FROM Sales s JOIN Stockist st ON s.Stockist_ID = st.ID JOIN HQ h ON s.HQ_ID = h.ID WHERE s.TRANSACTION_DATE >= date_trunc('month', CURRENT_DATE) - INTERVAL '6 months' AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) + INTERVAL '1 month' AND COALESCE(TRIM(st.Name), '') <> '' AND h.Name LIKE '%Enter hq name%' GROUP BY st.Name, h.Name, st.ID ORDER BY st.Name, h.Name;"
  },
  {
    "id": 12,
    "use": "Dynamic",
    "hide": true,
    "questions": [],
    "name": "Which strockist have zero billing for brand ****** for hq ****** from current month beginning to MTD?",
    "query": "SELECT s.Name AS StockistName FROM Stockist s JOIN StockistHQMap shm ON s.ID = shm.Stockist_ID JOIN HQ h ON shm.HQ_ID = h.ID WHERE LOWER(h.Name) LIKE LOWER('%{hq_name}%') AND s.Name IS NOT NULL AND s.Name <> 'unknown' AND NOT EXISTS (SELECT 1 FROM Sales sa JOIN BrandSKUMap bs ON sa.SKU_CODE = bs.SKU_Code JOIN Brand b ON bs.Brand_ID = b.ID WHERE sa.Stockist_ID = s.ID AND sa.hq_id = '{hq_id}' AND sa.TRANSACTION_DATE >= date_trunc('month', current_date) - interval '{months_offset} months' AND sa.TRANSACTION_DATE < date_trunc('month', current_date) - interval '{months_offset - 1} months' AND LOWER(b.Name) = LOWER('{brand_name}') AND sa.primary_sales > 0) ORDER BY s.Name;"
  },
  {
    "id": 13,
    "name": "What is the present date of the current month sales for all Stockists for current month to the  present date of the current month of ****** HQ ******",
    "query": "SELECT st.Name AS \"Stockist Name\", h.Name AS \"HQ Name\", SUM(CASE WHEN s.TRANSACTION_DATE >= date_trunc('month', CURRENT_DATE) AND s.TRANSACTION_DATE < CURRENT_DATE THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month\", SUM(CASE WHEN s.TRANSACTION_DATE >= date_trunc('month', CURRENT_DATE) - INTERVAL '1 month' AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END) AS \"Month -1\", SUM(CASE WHEN s.TRANSACTION_DATE >= date_trunc('month', CURRENT_DATE) - INTERVAL '2 months' AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Month -2\", SUM(CASE WHEN s.TRANSACTION_DATE >= date_trunc('month', CURRENT_DATE) - INTERVAL '3 months' AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Month -3\", SUM(CASE WHEN s.TRANSACTION_DATE >= date_trunc('month', CURRENT_DATE) - INTERVAL '4 months' AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '3 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Month -4\", SUM(CASE WHEN s.TRANSACTION_DATE >= date_trunc('month', CURRENT_DATE) - INTERVAL '5 months' AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '4 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Month -5\", SUM(CASE WHEN s.TRANSACTION_DATE >= date_trunc('month', CURRENT_DATE) - INTERVAL '[N] months' AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '5 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Month -6\" FROM Sales s JOIN Stockist st ON s.Stockist_ID = st.ID JOIN HQ h ON s.HQ_ID = h.ID WHERE s.TRANSACTION_DATE >= date_trunc('month', CURRENT_DATE) - INTERVAL '[N] months' AND s.TRANSACTION_DATE < CURRENT_DATE AND COALESCE(TRIM(st.Name), '') <> '' AND h.Name LIKE '[HQ Name]' GROUP BY st.Name, h.Name, st.ID ORDER BY st.Name, h.Name;",
    "use": "Dynamic",
    "hide": true,
    "questions": []
  },
  {
    "id": 14,
    "name": "Which Stockist is having sales for ****** less than the average of ****** month sales",
    "query": "SELECT st.Name AS \"Stockist Name\", hq.Name AS \"HQ Name\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month-3\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month-2\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month-1\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month\", ROUND(AVG(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) IN (DATE_PART('month', CURRENT_DATE - INTERVAL '3 month'), DATE_PART('month', CURRENT_DATE - INTERVAL '2 month'), DATE_PART('month', CURRENT_DATE - INTERVAL '1 month')) THEN s.PRIMARY_SALES ELSE NULL END), 2) AS \"Average_Primary Sales Last_3_Months\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END) - AVG(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) IN (DATE_PART('month', CURRENT_DATE - INTERVAL '3 month'), DATE_PART('month', CURRENT_DATE - INTERVAL '2 month'), DATE_PART('month', CURRENT_DATE - INTERVAL '1 month')) THEN s.PRIMARY_SALES ELSE NULL END), 2) AS Difference_In_Billing FROM Sales s JOIN Stockist st ON s.Stockist_ID = st.ID JOIN HQ hq ON s.HQ_ID = hq.ID JOIN BrandSKUMap bs ON s.SKU_CODE = bs.SKU_Code JOIN Brand b ON bs.Brand_ID = b.ID WHERE b.Name LIKE 'enter brand name' AND hq.Name LIKE 'enter hq name' GROUP BY st.Name, hq.Name HAVING ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END), 2) < ROUND(AVG(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) IN (DATE_PART('month', CURRENT_DATE - INTERVAL '3 month'), DATE_PART('month', CURRENT_DATE - INTERVAL '2 month'), DATE_PART('month', CURRENT_DATE - INTERVAL '1 month')) THEN s.PRIMARY_SALES ELSE NULL END), 2) ORDER BY Difference_In_Billing;",
    "use": "Dynamic",
    "questions": []
  },
  {
    "id": 15,
    "name": "Which MEDVOL sale type Stockist are having sales for ******  less than average of ****** month.",
    "query": "SELECT * FROM (SELECT hq.name AS hq_name, stockist.name AS stockist_name, ROUND(SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END), 2) AS \"sales_current_month_minus_1\", ROUND(SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.primary_sales ELSE 0 END), 2) AS \"sales_current_month_minus_2\", ROUND(SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.primary_sales ELSE 0 END), 2) AS \"sales_current_month_minus_3\", ROUND((SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) + SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.primary_sales ELSE 0 END) + SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.primary_sales ELSE 0 END)) / 3, 2) AS avg_sales_last_three_months, ROUND(SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END), 2) AS current_month_sales, ROUND(SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) - (SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) + SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.primary_sales ELSE 0 END) + SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.primary_sales ELSE 0 END)) / 3, 2) AS sales_difference FROM sales s JOIN hq ON s.hq_id = hq.id JOIN stockist ON s.stockist_id = stockist.id WHERE s.status LIKE 'enter sale type' AND s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' GROUP BY hq.name, stockist.name, stockist.id HAVING SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) < (SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) + SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.primary_sales ELSE 0 END) + SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.primary_sales ELSE 0 END)) / 3) AS subquery ORDER BY sales_difference;",
    "use": "Dynamic",
    "questions": []
  },
  {
    "id": 16,
    "name": "What is weekly billing for HQ ****** for  ****** to ****** month ",
    "query": "SELECT TO_CHAR(DATE_TRUNC('month', s.transaction_date), 'Mon-YY') AS month, FLOOR((EXTRACT(DAY FROM s.transaction_date) - 1) / 7) + 1 AS week_number, SUM(s.primary_sales) AS weekly_sales, total_monthly_sales FROM sales s INNER JOIN hq ON s.hq_id = hq.id INNER JOIN stockist ON s.stockist_id = stockist.id INNER JOIN (SELECT DATE_TRUNC('month', sales.transaction_date) AS month_start, SUM(sales.primary_sales) AS total_monthly_sales FROM sales INNER JOIN hq ON sales.hq_id = hq.id INNER JOIN stockist ON sales.stockist_id = stockist.id WHERE hq.name = '{{hq_name}}' AND sales.transaction_date BETWEEN '{{start_date}}' AND '{{end_date}}' GROUP BY DATE_TRUNC('month', sales.transaction_date)) monthly_totals ON DATE_TRUNC('month', s.transaction_date) = monthly_totals.month_start WHERE hq.name LIKE '{{hq_name}}' AND s.transaction_date BETWEEN '{{start_date}}' AND '{{end_date}}' GROUP BY month, week_number, total_monthly_sales, DATE_TRUNC('month', s.transaction_date) ORDER BY DATE_TRUNC('month', s.transaction_date);",
    "use": "Dynamic",
    "questions": []
  }
]
