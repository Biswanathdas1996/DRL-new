[
  {
    "id": 1,
    "questions": [],
    "name": "What is the Total Sales , Total Target, %Achievement for Brand Category: \"****\" for ***** month",
    "use": "Dynamic",
    "query": "SELECT TO_CHAR(COALESCE(sales_data.month, target_data.month), 'Month') AS \"Month\", hq.name AS \"HQ Name\", COALESCE(SUM(sales_data.primary_sales), 0) AS \"Total Sales\", COALESCE(SUM(target_data.target_value), 0) AS \"Total Target\", ROUND((COALESCE(SUM(sales_data.primary_sales), 0) / NULLIF(SUM(target_data.target_value), 0)) * 100, 2) AS \"Sales Achievement %\" FROM (SELECT hq_id, sku_code, DATE_TRUNC('month', transaction_date) AS month, SUM(primary_sales) AS primary_sales FROM Sales WHERE transaction_date >= 'Enter date in format of YYYY-MM-DD'::DATE AND transaction_date < 'Enter date in format of YYYY-MM-DD'::DATE GROUP BY hq_id, sku_code, month) sales_data FULL OUTER JOIN (SELECT hq_id, sku_code, DATE_TRUNC('month', target_date) AS month, SUM(target_value) AS target_value FROM Target WHERE target_date >= 'Enter date in format of YYYY-MM-DD'::DATE AND target_date < 'Enter date in format of YYYY-MM-DD'::DATE GROUP BY hq_id, sku_code, month) target_data ON sales_data.hq_id = target_data.hq_id AND sales_data.sku_code = target_data.sku_code AND sales_data.month = target_data.month JOIN HQ hq ON COALESCE(sales_data.hq_id, target_data.hq_id) = hq.id INNER JOIN brandskumap ON sales_data.sku_code = brandskumap.sku_code INNER JOIN brand ON brandskumap.brand_id = brand.id WHERE brand.category LIKE '%Enter brand.category%'  GROUP BY COALESCE(sales_data.month, target_data.month), hq.id, hq.name HAVING SUM(sales_data.primary_sales) IS NOT NULL OR SUM(target_data.target_value) IS NOT NULL ORDER BY COALESCE(sales_data.month, target_data.month), hq.name;"
  },

  {
    "id": 2,
    "use": "Dynamic",
    "questions": [],
    "name": "What is the %Total Sales Value, Sales Return Value , % Returns for brand **Name*** for ***month1*** and **month2** for HQ",
    "query": "SELECT TO_CHAR(DATE_TRUNC('month', s.TRANSACTION_DATE), 'Month') AS month, SUM(s.PRIMARY_SALES) AS primary_sales, SUM(CASE WHEN s.status = 'Returns' THEN s.PRIMARY_SALES ELSE 0 END) AS sales_return_value, ROUND((SUM(CASE WHEN s.status = 'Returns' THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(s.PRIMARY_SALES), 0)) * 100, 2) AS sales_return_percentage FROM Sales s JOIN HQ h ON s.HQ_ID = h.ID JOIN BrandSKUMap bsku ON s.SKU_CODE = bsku.SKU_Code JOIN Brand b ON bsku.Brand_ID = b.ID WHERE h.Name LIKE '%Enter hq name%' AND b.Name = '******' AND s.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' GROUP BY DATE_TRUNC('month', s.TRANSACTION_DATE) ORDER BY DATE_TRUNC('month', s.TRANSACTION_DATE);"
  },
  {
    "id": 3,
    "use": "Dynamic",
    "questions": [],
    "name": "Give the name of stockiest who have Total Sales Value, Sales Return Value , %Return in **** for brand ****",
    "query": "SELECT s.Name AS \"Stockist Name\", SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) AS \"Current_Month-3 Returns\", SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) AS \"Current_Month-2 Returns\", SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) AS \"Current_Month-1 Returns\", SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) + SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 months') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) + SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) AS \"Total Returns 3 Months\", SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES >= 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) + SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES < 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) AS \"Sales 3 Months\", CASE WHEN SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES >= 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) + SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES < 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) = 0 THEN 0 ELSE ROUND(((SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) + SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 months') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) + SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0)) / (SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES >= 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) + SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES < 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)))),2) * 100 END AS \"Return Percentage\" FROM Stockist s JOIN Sales sa ON s.ID = sa.Stockist_ID JOIN BrandSKUMap bs ON sa.SKU_CODE = bs.SKU_Code JOIN Brand b ON bs.Brand_ID = b.ID JOIN StockistHQMap sh ON sh.Stockist_ID = s.ID JOIN HQ h ON sh.HQ_ID = h.ID WHERE b.Name = 'enter the brand name' AND h.Name LIKE '%Enter hq name%' GROUP BY s.Name HAVING CASE WHEN SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES >= 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) + SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES < 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) = 0 THEN 0 ELSE ((SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) + SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 months') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0) + SUM(CASE WHEN DATE_PART('month', sa.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN sa.PRIMARY_SALES ELSE 0 END) FILTER (WHERE sa.PRIMARY_SALES < 0)) / (SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES >= 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)) + SUM(sa.PRIMARY_SALES) FILTER (WHERE sa.PRIMARY_SALES < 0 AND sa.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND sa.TRANSACTION_DATE < DATE_TRUNC('month', CURRENT_DATE)))) * 100 END < 0 ORDER BY \"Total Returns 3 Months\" DESC;"
  },
  {
    "id": 4,
    "use": "Dynamic",
    "questions": [],
    "name": "What is the Total Sales , Total Target, %Achievement for my HQ for ***** month",
    "query": "SELECT TO_CHAR(COALESCE(sales_data.month, target_data.month), 'Month') AS \"Month\", hq.name AS \"HQ Name\", COALESCE(SUM(sales_data.primary_sales), 0) AS \"Total Sales\", COALESCE(SUM(target_data.target_value), 0) AS \"Total Target\", ROUND((COALESCE(SUM(sales_data.primary_sales), 0) / NULLIF(SUM(target_data.target_value), 0)) * 100, 2) AS \"Sales Achievement %\" FROM (SELECT hq_id, sku_code, DATE_TRUNC('month', transaction_date) AS MONTH, SUM(primary_sales) AS primary_sales FROM Sales WHERE transaction_date >= 'Enter date in format of YYYY-MM-DD'::DATE AND transaction_date < 'Enter date in format of YYYY-MM-DD'::DATE AND hq_id IN ('enter hq_ids') GROUP BY hq_id, sku_code, MONTH) sales_data FULL OUTER JOIN (SELECT hq_id, sku_code, DATE_TRUNC('month', target_date) AS MONTH, SUM(target_value) AS target_value FROM Target WHERE target_date >= 'Enter date in format of YYYY-MM-DD'::DATE AND target_date < 'Enter date in format of YYYY-MM-DD'::DATE AND hq_id IN ('enter hq_ids') GROUP BY hq_id, sku_code, MONTH) target_data ON sales_data.hq_id = target_data.hq_id AND sales_data.sku_code = target_data.sku_code AND sales_data.month = target_data.month JOIN HQ hq ON COALESCE(sales_data.hq_id, target_data.hq_id) = hq.id GROUP BY COALESCE(sales_data.month, target_data.month), hq.id, hq.name HAVING SUM(sales_data.primary_sales) IS NOT NULL OR SUM(target_data.target_value) IS NOT NULL ORDER BY COALESCE(sales_data.month, target_data.month), hq.name;"
  },
  {
    "id": 5,
    "use": "Dynamic",
    "questions": [],
    "name": "Give me the Total Sales , Total Target, %Achievement of Brands where the sales surplus / deficit than the target for all HQ for ***** quarter",
    "query": "SELECT brand.id, brand.Name AS \"Brand Name\", COALESCE(SUM(s.PRIMARY_SALES), 0) - COALESCE(SUM(t.TARGET_VALUE), 0) AS \"Quarterly Surplus/ Deficit\", CASE WHEN COALESCE(SUM(t.TARGET_VALUE), 0) > 0 THEN ROUND((COALESCE(SUM(s.PRIMARY_SALES), 0) * 100.0 / COALESCE(SUM(t.TARGET_VALUE), 0)), 2) ELSE 0.00 END AS \"Quarterly % Ach.\", COALESCE(SUM(t.TARGET_VALUE), 0) AS \"Quarterly Total Target\" FROM (SELECT hq_id::text, sku_code, SUM(primary_sales) AS primary_sales FROM Sales WHERE TRANSACTION_DATE <= CURRENT_DATE AND date_part('quarter', TRANSACTION_DATE) = date_part('quarter', CURRENT_DATE - interval '3 months') AND hq_id IN ('hq_ids') GROUP BY hq_id, sku_code) s FULL OUTER JOIN (SELECT hq_id::text, sku_code, SUM(target_value) AS target_value FROM Target WHERE date_part('quarter', TARGET_DATE) = date_part('quarter', CURRENT_DATE - interval '3 months') AND hq_id IN ('hq_ids') GROUP BY hq_id, sku_code) t ON s.hq_id = t.hq_id AND s.sku_code = t.sku_code JOIN HQ hq ON COALESCE(s.hq_id, t.hq_id) = hq.id INNER JOIN brandskumap ON COALESCE(s.sku_code, t.sku_code) = brandskumap.sku_code INNER JOIN brand ON brandskumap.brand_id = brand.id GROUP BY brand.id, brand.name ORDER BY brand.name;"
  },

  {
    "id": 6,
    "use": "Dynamic",
    "questions": [],
    "name": "What are my critical Headquarters.",
    "query": "SELECT hq.Name AS HQ_Name, ROUND(COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0), 2) AS \"Current_Month-3 Achievement_Percentage\", ROUND(COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0), 2) AS \"Current_Month-2 Achievement_Percentage\", ROUND(COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0), 2) AS \"Current_Month-1 Achievement_Percentage\", ROUND(COALESCE((SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END) + SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END) + SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END)) / NULLIF((SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN t.TARGET_UNITS ELSE 0 END) + SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN t.TARGET_UNITS ELSE 0 END) + SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN t.TARGET_UNITS ELSE 0 END)), 0) * 100, 0), 2) AS Total_Achievement_Percentage FROM (SELECT hq_id, sku_code, DATE_PART('MONTH', TRANSACTION_DATE) AS MONTH_NUM, SUM(primary_sales) AS PRIMARY_SALES FROM Sales WHERE TRANSACTION_DATE >= DATE_TRUNC('MONTH', CURRENT_DATE - INTERVAL '3 month') AND TRANSACTION_DATE < DATE_TRUNC('MONTH', CURRENT_DATE) GROUP BY hq_id, sku_code, DATE_PART('MONTH', TRANSACTION_DATE)) s FULL OUTER JOIN (SELECT hq_id, sku_code, DATE_PART('MONTH', target_date) AS MONTH_NUM, SUM(target_units) AS TARGET_UNITS FROM Target WHERE target_date >= DATE_TRUNC('MONTH', CURRENT_DATE - INTERVAL '3 month') AND target_date < DATE_TRUNC('MONTH', CURRENT_DATE) GROUP BY hq_id, sku_code, DATE_PART('MONTH', target_date)) t ON s.hq_id = t.hq_id AND s.sku_code = t.sku_code AND s.MONTH_NUM = t.MONTH_NUM JOIN HQ hq ON COALESCE(s.hq_id, t.hq_id) = hq.id WHERE hq.Name <> 'unknown' GROUP BY hq.Name HAVING COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0) < 85 AND COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0) < 85 AND COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN t.TARGET_UNITS ELSE 0 END), 0) * 100, 0) < 85 ORDER BY HQ_Name;"
  },
  {
    "id": 7,
    "use": "Dynamic",
    "questions": [],
    "name": "Which brands have performed below target for the Critical area for the last ***** months.",
    "query": "SELECT sk.Name AS \"SKUs\", ROUND(COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0), 2) AS \"Current_Month-3 Achievement_Percentage\", ROUND(COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0), 2) AS \"Current_Month-2 Achievement_Percentage\", ROUND(COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0), 2) AS \"Current_Month-1 Achievement_Percentage\", ROUND(COALESCE((SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END) + SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END) + SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END)) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN t.TARGET_VALUE ELSE 0 END) + SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN t.TARGET_VALUE ELSE 0 END) + SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0), 2) AS Total_Achievement_Percentage FROM (SELECT hq_id, sku_code, DATE_PART('MONTH', TRANSACTION_DATE) AS MONTH_NUM, SUM(primary_sales) AS PRIMARY_SALES FROM Sales WHERE TRANSACTION_DATE >= DATE_TRUNC('MONTH', CURRENT_DATE - INTERVAL '3 month') AND TRANSACTION_DATE < DATE_TRUNC('MONTH', CURRENT_DATE) GROUP BY hq_id, sku_code, DATE_PART('MONTH', TRANSACTION_DATE)) s FULL OUTER JOIN (SELECT hq_id, sku_code, DATE_PART('MONTH', target_date) AS MONTH_NUM, SUM(target_value) AS TARGET_VALUE FROM Target WHERE target_date >= DATE_TRUNC('MONTH', CURRENT_DATE - INTERVAL '3 month') AND target_date < DATE_TRUNC('MONTH', CURRENT_DATE) GROUP BY hq_id, sku_code, DATE_PART('MONTH', target_date)) t ON s.hq_id = t.hq_id AND s.sku_code = t.sku_code AND s.MONTH_NUM = t.MONTH_NUM JOIN HQ hq ON COALESCE(s.hq_id, t.hq_id) = hq.id INNER JOIN brandskumap ON s.sku_code = brandskumap.sku_code INNER JOIN sku sk ON brandskumap.sku_code = sk.code WHERE hq.Name <> 'unknown' GROUP BY sk.Name HAVING COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0) < 85 AND COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0) < 85 AND COALESCE(SUM(CASE WHEN s.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END) / NULLIF(SUM(CASE WHEN t.MONTH_NUM = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN t.TARGET_VALUE ELSE 0 END), 0) * 100, 0) < 85 ORDER BY sk.Name;"
  },

  {
    "id": 8,
    "use": "Dynamic",
    "questions": [],
    "name": "Give me the mid-month performance for current month and past two months, HQ wise",
    "query": "SELECT hq.NAME, COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth-1\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth-2\", t1.TARGET_VALUE AS \"Total Target CurrentMonth\", t2.TARGET_VALUE AS \"Total Target CurrentMonth-1\", t3.TARGET_VALUE AS \"Total Target CurrentMonth-2\", ROUND((COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) / NULLIF(t1.TARGET_VALUE, 0)) * 100, 2) AS \"Target Ach % CurrentMonth\", ROUND((COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') THEN s.primary_sales ELSE 0 END), 0) / NULLIF(t2.TARGET_VALUE, 0)) * 100, 2) AS \"Target Ach % CurrentMonth-1\", ROUND((COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') THEN s.primary_sales ELSE 0 END), 0) / NULLIF(t3.TARGET_VALUE, 0)) * 100, 2) AS \"Target Ach % CurrentMonth-2\" FROM HQ hq LEFT JOIN SALES s ON s.HQ_ID = hq.id LEFT JOIN (SELECT HQ_ID, SUM(TARGET_VALUE) AS TARGET_VALUE FROM TARGET WHERE DATE_PART('MONTH', target_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', target_date) = DATE_PART('YEAR', CURRENT_DATE) GROUP BY HQ_ID) t1 ON t1.HQ_ID = hq.ID LEFT JOIN (SELECT HQ_ID, SUM(TARGET_VALUE) AS TARGET_VALUE FROM TARGET WHERE DATE_PART('MONTH', target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', target_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') GROUP BY HQ_ID) t2 ON t2.HQ_ID = hq.ID LEFT JOIN (SELECT HQ_ID, SUM(TARGET_VALUE) AS TARGET_VALUE FROM TARGET WHERE DATE_PART('MONTH', target_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', target_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') GROUP BY HQ_ID) t3 ON t3.HQ_ID = hq.ID WHERE ((DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15) OR (DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month')) OR (DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months'))) GROUP BY hq.NAME, t1.TARGET_VALUE, t2.TARGET_VALUE, t3.TARGET_VALUE ORDER BY hq.NAME;"
  },
  {
    "id": 125.1,
    "use": "Dynamic",
    "questions": [],
    "name": "Which Stockist within HQ Enter hq name are having the sales for current mid-month is less than the average of last three mid-month sales.",
    "query": "SELECT hq.NAME AS \"HQ Name\", st.NAME AS \"Stockist Name\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth-1\", COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) AS \"Mid-month CurrentMonth-2\" FROM SALES s JOIN HQ hq ON s.HQ_ID = hq.ID JOIN STOCKIST st ON s.STOCKIST_ID = st.ID WHERE ((DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15) OR (DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('DAY', s.transaction_date) <= 15) OR (DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('DAY', s.transaction_date) <= 15)) AND hq.NAME LIKE '%Enter hq name%' GROUP BY s.HQ_ID, hq.NAME, st.NAME HAVING COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE) AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0) < GREATEST(COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0), COALESCE(SUM(CASE WHEN DATE_PART('MONTH', s.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('YEAR', s.transaction_date) = DATE_PART('YEAR', CURRENT_DATE - INTERVAL '2 months') AND DATE_PART('DAY', s.transaction_date) <= 15 THEN s.primary_sales ELSE 0 END), 0)) ORDER BY \"HQ Name\", \"Stockist Name\";"
  },
  {
    "id": 126,
    "use": "Dynamic",
    "questions": [],
    "name": "What is the mid-month sales transactions for the given months grouped month wise, difference between the current month sales and the average of the given months, filter only those stockist where the diff is negative  for HQ Enter hq name for the past three months.",
    "query": "SELECT hq.name AS \"HQ Name\", stockist.name AS \"Stockist Name\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN sales.primary_sales ELSE 0 END) AS \"Mid-month Current_Month-3\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN sales.primary_sales ELSE 0 END) AS \"Mid-month Current_Month-2\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN sales.primary_sales ELSE 0 END) AS \"Mid-month Current_Month-1\", ROUND((SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN sales.primary_sales ELSE 0 END)) / 3.0, 2) AS \"Average Last 3 Months Mid-month\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) THEN sales.primary_sales ELSE 0 END) AS \"Mid-month (Current Month)\", SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) THEN sales.primary_sales ELSE 0 END) - ROUND((SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN sales.primary_sales ELSE 0 END)) / 3.0, 2) AS \"Difference\" FROM sales JOIN hq ON sales.hq_id = hq.id JOIN stockist ON sales.stockist_id = stockist.id WHERE DATE_PART('day', sales.transaction_date) <= 15 AND hq.NAME LIKE '%Enter hq name%' GROUP BY hq.name, stockist.name, stockist.id HAVING SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE) THEN sales.primary_sales ELSE 0 END) < ROUND((SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '3 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '2 month') THEN sales.primary_sales ELSE 0 END) + SUM(CASE WHEN DATE_PART('month', sales.transaction_date) = DATE_PART('MONTH', CURRENT_DATE - INTERVAL '1 month') THEN sales.primary_sales ELSE 0 END)) / 3.0, 2) ORDER BY \"Difference\" ASC;"
  },
  {
    "id": 127.1,

    "name": "Provide a detailed analysis of the Month-to-Date (MTD) sales trend for stockists under the Enter hq name HQ. For each stockist, show their sales performance for the current month, and compare it with the sales figures from the previous six months. The report should track the sales trend over the last 6 months, starting from the current month, to help assess any growth or decline in sales. Ensure that the data includes sales for each month in the past 6 months, starting from the most recent month, and highlight the performance difference over this period.",
    "query": "SELECT st.Name AS \"Stockist Name\", h.Name AS \"HQ Name\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '0 month' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) + INTERVAL '1 month' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '1 month' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END) AS \"Month -1\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '2 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -2\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '3 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -3\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '4 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '3 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -4\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '5 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '4 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -5\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '6 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '5 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -6\" FROM Sales s JOIN Stockist st ON s.Stockist_ID = st.ID JOIN HQ h ON s.HQ_ID = h.ID WHERE s.TRANSACTION_DATE >= date_trunc('month', CURRENT_DATE) - INTERVAL '6 months' AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) + INTERVAL '1 month' AND COALESCE(TRIM(st.Name), '') <> '' AND h.Name LIKE '%Enter hq name%' GROUP BY st.Name, h.Name, st.ID ORDER BY st.Name, h.Name LIMIT 5;",
    "use": "Dynamic",
    "questions": []
  },
  {
    "id": 128.1,
    "name": "What is the sales for the current and past 6 months grouped month wise  for all Stockist under HQ Enter hq name.",
    "query": "SELECT st.Name AS \"Stockist Name\", h.Name AS \"HQ Name\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '0 month' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) + INTERVAL '1 month' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '1 month' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END) AS \"Month -1\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '2 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -2\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '3 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -3\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '4 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '3 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -4\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '5 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '4 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -5\", SUM(CASE WHEN date_trunc('month', CURRENT_DATE) - INTERVAL '6 months' <= s.TRANSACTION_DATE AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) - INTERVAL '5 months' THEN s.PRIMARY_SALES ELSE 0 END) AS \"Current_Month -6\" FROM Sales s JOIN Stockist st ON s.Stockist_ID = st.ID JOIN HQ h ON s.HQ_ID = h.ID WHERE s.TRANSACTION_DATE >= date_trunc('month', CURRENT_DATE) - INTERVAL '6 months' AND s.TRANSACTION_DATE < date_trunc('month', CURRENT_DATE) + INTERVAL '1 month' AND COALESCE(TRIM(st.Name), '') <> '' AND h.Name LIKE '%Enter hq name%' GROUP BY st.Name, h.Name, st.ID ORDER BY st.Name, h.Name LIMIT 5;",
    "use": "Dynamic",
    "questions": []
  },
  {
    "id": 129,
    "name": "What would be my HQ wise business plan for the month of Dec'24 based on my Third Quarter sales",
    "query": "SELECT HQ.Name AS HQ_Name, COALESCE(SUM(S.Primary_Sales), 0) AS YTD_Sales, COALESCE(ROUND((SUM(S.Primary_Sales) * 100.0) / NULLIF(SUM(T.Target_Value), 0), 2), 0) AS YTD_Percentage_Achievement FROM (SELECT HQ_ID, SKU_CODE, DIVISION_CODE, SUM(Primary_Sales) AS Primary_Sales FROM Sales WHERE TRANSACTION_DATE BETWEEN CASE WHEN DATE_PART('month', CURRENT_DATE) >= 4 THEN DATE_TRUNC('year', CURRENT_DATE) + INTERVAL '3 months' ELSE DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '9 months' END AND CURRENT_DATE GROUP BY HQ_ID, SKU_CODE, DIVISION_CODE) S INNER JOIN (SELECT HQ_ID, SKU_CODE, DIVISION_CODE, SUM(Target_Value) AS Target_Value FROM Target WHERE Target_Date BETWEEN CASE WHEN DATE_PART('month', CURRENT_DATE) >= 4 THEN DATE_TRUNC('year', CURRENT_DATE) + INTERVAL '3 months' ELSE DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '9 months' END AND CURRENT_DATE GROUP BY HQ_ID, SKU_CODE, DIVISION_CODE) T ON S.HQ_ID = T.HQ_ID AND S.SKU_CODE = T.SKU_CODE AND S.DIVISION_CODE = T.DIVISION_CODE INNER JOIN HQ ON S.HQ_ID = HQ.ID WHERE HQ.NAME LIKE '%TM HQ - Enter hq name%' GROUP BY HQ.ID, HQ.Name;",
    "query2": "SELECT HQ.Name AS hq_name, SUM(s.PRIMARY_SALES) AS \"Current_Month-1 Sales\", SUM(s.PRIMARY_SALES) - COALESCE(SUM(t.TARGET_VALUE), 0) AS \"Quarterly Surplus/Deficit\", CASE WHEN COALESCE(SUM(t.TARGET_VALUE), 0) > 0 THEN ROUND((SUM(s.PRIMARY_SALES) * 100.0 / SUM(t.TARGET_VALUE)), 2) ELSE NULL END AS \"Quarterly % Ach.\", MAX(CASE WHEN date_part('month', t.target_date) = date_part('month', CURRENT_DATE) THEN t.TARGET_VALUE ELSE 0 END) AS \"Last_Month_Of_Quarter Target\" FROM Sales s LEFT JOIN Target t ON s.SKU_CODE = t.SKU_CODE AND s.Division_Code = t.Division_Code AND s.HQ_ID = t.HQ_ID AND date_part('year', s.TRANSACTION_DATE) = date_part('year', t.target_date) AND date_part('month', s.TRANSACTION_DATE) = date_part('month', t.target_date) INNER JOIN HQ ON s.HQ_ID = HQ.ID WHERE HQ.NAME LIKE '%TM HQ - Enter hq name%' AND date_part('quarter', s.TRANSACTION_DATE) = date_part('quarter', CURRENT_DATE) AND s.TRANSACTION_DATE <= CURRENT_DATE GROUP BY HQ.ID, HQ.Name;",
    "use": "Dynamic",
    "questions": []
  },
  {
    "id": 129.1,
    "name": "Show me the YTD Performance for HQ Enter hq name for Brands, Grouped by brands",
    "query": "SELECT b.Name AS \"Brand Name\", COALESCE(SUM(S.Primary_Sales), 0) AS YTD_Sales, COALESCE(ROUND((SUM(S.Primary_Sales) * 100.0) / NULLIF(SUM(T.Target_Value), 0), 2), 0) AS YTD_Percentage_Achievement FROM (SELECT HQ_ID, SKU_CODE, DIVISION_CODE, SUM(Primary_Sales) AS Primary_Sales FROM Sales WHERE TRANSACTION_DATE BETWEEN CASE WHEN DATE_PART('month', CURRENT_DATE) >= 4 THEN DATE_TRUNC('year', CURRENT_DATE) + INTERVAL '3 months' ELSE DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '9 months' END AND CURRENT_DATE GROUP BY HQ_ID, SKU_CODE, DIVISION_CODE) S INNER JOIN (SELECT HQ_ID, SKU_CODE, DIVISION_CODE, SUM(Target_Value) AS Target_Value FROM Target WHERE Target_Date BETWEEN CASE WHEN DATE_PART('month', CURRENT_DATE) >= 4 THEN DATE_TRUNC('year', CURRENT_DATE) + INTERVAL '3 months' ELSE DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '9 months' END AND CURRENT_DATE GROUP BY HQ_ID, SKU_CODE, DIVISION_CODE) T ON S.HQ_ID = T.HQ_ID AND S.SKU_CODE = T.SKU_CODE AND S.DIVISION_CODE = T.DIVISION_CODE INNER JOIN BrandSKUMap bs ON s.SKU_CODE = bs.SKU_CODE INNER JOIN Brand b ON bs.Brand_ID = b.ID INNER JOIN HQ ON S.HQ_ID = HQ.ID WHERE HQ.NAME LIKE '%TM HQ - Enter hq name%' GROUP BY b.ID, b.Name;",
    "use": "Dynamic",
    "questions": []
  },
  {
    "id": 129.2,
    "name": "Retrieve the sales, quarterly surplus/deficit, quarterly achievement percentage, and the last month's target for each brand under TM HQ - Agartala for the current quarter.",
    "query": "SELECT b.Name AS \"Brand Name\", SUM(s.PRIMARY_SALES) AS \"Current_Month-1 Sales\", SUM(s.PRIMARY_SALES) - COALESCE(SUM(t.TARGET_VALUE), 0) AS \"Quarterly Surplus/Deficit\", CASE WHEN COALESCE(SUM(t.TARGET_VALUE), 0) > 0 THEN ROUND((SUM(s.PRIMARY_SALES) * 100.0 / SUM(t.TARGET_VALUE)), 2) ELSE NULL END AS \"Quarterly % Ach.\", MAX(CASE WHEN date_part('month', t.target_date) = date_part('month', CURRENT_DATE) THEN t.TARGET_VALUE ELSE 0 END) AS \"Last_Month_Of_Quarter Target\" FROM Sales s LEFT JOIN Target t ON s.SKU_CODE = t.SKU_CODE AND s.Division_Code = t.Division_Code AND s.HQ_ID = t.HQ_ID AND date_part('year', s.TRANSACTION_DATE) = date_part('year', t.target_date) AND date_part('month', s.TRANSACTION_DATE) = date_part('month', t.target_date) INNER JOIN BrandSKUMap bs ON s.SKU_CODE = bs.SKU_Code INNER JOIN Brand b ON bs.Brand_ID = b.ID INNER JOIN HQ ON S.HQ_ID = HQ.ID WHERE HQ.NAME LIKE '%TM HQ - Agartala%' AND date_part('quarter', s.TRANSACTION_DATE) = date_part('quarter', CURRENT_DATE) AND s.TRANSACTION_DATE <= CURRENT_DATE GROUP BY b.ID, b.Name;",
    "use": "Dynamic",
    "questions": []
  },
  {
    "id": 130,
    "name": "What is week on week primary billing pattern for AllAhabad HQ for last 6 months, grouped Month wise",
    "query": "SELECT TO_CHAR(DATE_TRUNC('month', s.transaction_date), 'Mon-YY') AS month, FLOOR((EXTRACT(DAY FROM s.transaction_date) - 1) / 7) + 1 AS week_number, SUM(s.primary_sales) AS weekly_sales, total_monthly_sales FROM sales s INNER JOIN hq ON s.hq_id = hq.id INNER JOIN stockist ON s.stockist_id = stockist.id INNER JOIN ( SELECT DATE_TRUNC('month', sales.transaction_date) AS month_start, SUM(sales.primary_sales) AS total_monthly_sales FROM sales INNER JOIN hq ON sales.hq_id = hq.id INNER JOIN stockist ON sales.stockist_id = stockist.id WHERE hq.name = 'TM HQ - Agartala' AND sales.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 months' GROUP BY DATE_TRUNC('month', sales.transaction_date) ) monthly_totals ON DATE_TRUNC('month', s.transaction_date) = monthly_totals.month_start WHERE hq.name LIKE '%TM HQ - Agartala%' AND s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month' GROUP BY month, week_number, total_monthly_sales, DATE_TRUNC('month', s.transaction_date) ORDER BY DATE_TRUNC('month', s.transaction_date);",
    "use": "Dynamic",
    "questions": []
  },
  {
    "id": 131,
    "name": "Which account is giving me drop in MEDVOL Channel when compared to Last 3 month Avg ?",
    "query": "SELECT * FROM ( SELECT hq.name AS hq_name, stockist.name AS stockist_name, ROUND(SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END),2) AS \"sales_current_month_minus_1\", ROUND(SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.primary_sales ELSE 0 END),2) AS \"sales_current_month_minus_2\", ROUND(SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.primary_sales ELSE 0 END),2) AS \"sales_current_month_minus_3\", ROUND(( SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) + SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.primary_sales ELSE 0 END) + SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.primary_sales ELSE 0 END) ) / 3, 2) AS avg_sales_last_three_months, ROUND(SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END),2) AS current_month_sales, ROUND( SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) - ( SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) + SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.primary_sales ELSE 0 END) + SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.primary_sales ELSE 0 END) ) / 3, 2) AS sales_difference FROM sales s JOIN hq ON s.hq_id = hq.id JOIN stockist ON s.stockist_id = stockist.id WHERE s.status LIKE '%MEDVOL%' AND s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' GROUP BY hq.name, stockist.name, stockist.id HAVING SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) < ( SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) THEN s.primary_sales ELSE 0 END) + SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' THEN s.primary_sales ELSE 0 END) + SUM(CASE WHEN s.transaction_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' AND s.transaction_date < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' THEN s.primary_sales ELSE 0 END) ) / 3 ) AS subquery ORDER BY sales_difference LIMIT 5;",
    "use": "Dynamic",
    "questions": []
  },
  {
    "id": 132,
    "name": "What Stockist have Stockist wise current month sales , less than the average of sales for the period given for brand 'KETOROL INJ' For HQ Enter hq name for the last three months. ",
    "query": "SELECT st.Name AS \"Stockist Name\", hq.Name AS \"HQ Name\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month-3\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month-2\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month-1\", ROUND((ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) + ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) + ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END), 2)) / 3, 2) AS \"Average_Primary Sales Last_3_Months\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END) - (ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) + ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) + ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END), 2)) / 3, 2) AS Difference_In_Billing FROM Sales s JOIN Stockist st ON s.Stockist_ID = st.ID JOIN HQ hq ON s.HQ_ID = hq.ID JOIN BrandSKUMap bs ON s.SKU_CODE = bs.SKU_Code JOIN Brand b ON bs.Brand_ID = b.ID WHERE b.Name LIKE '%KETOROL INJ%' AND hq.Name LIKE '%Enter hq name%' GROUP BY st.Name, hq.Name HAVING ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END), 2) < ROUND((ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) + ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) + ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END), 2)) / 3, 2) ORDER BY Difference_In_Billing;",
    "use": "Dynamic",
    "questions": []
  },
  {
    "id": 132.1,
    "name": "Give billing for all stockist For HQ Enter hq name for the last three months. ",
    "query": "SELECT st.Name AS \"Stockist Name\", hq.Name AS \"HQ Name\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month-3\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month-2\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month-1\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END), 2) AS \"Primary_Sales_Current_Month\", ROUND(((SELECT COALESCE(SUM(s1.PRIMARY_SALES), 0) FROM Sales s1 WHERE DATE_PART('month', s1.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month')) + (SELECT COALESCE(SUM(s2.PRIMARY_SALES), 0) FROM Sales s2 WHERE DATE_PART('month', s2.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month')) + (SELECT COALESCE(SUM(s3.PRIMARY_SALES), 0) FROM Sales s3 WHERE DATE_PART('month', s3.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month'))) / 3, 2) AS \"Average_Primary Sales Last_3_Months\", ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END) - ((SELECT COALESCE(SUM(s1.PRIMARY_SALES), 0) FROM Sales s1 WHERE DATE_PART('month', s1.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month')) + (SELECT COALESCE(SUM(s2.PRIMARY_SALES), 0) FROM Sales s2 WHERE DATE_PART('month', s2.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month')) + (SELECT COALESCE(SUM(s3.PRIMARY_SALES), 0) FROM Sales s3 WHERE DATE_PART('month', s3.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month'))) / 3, 2) AS Difference_In_Billing FROM Sales s JOIN Stockist st ON s.Stockist_ID = st.ID JOIN HQ hq ON s.HQ_ID = hq.ID JOIN BrandSKUMap bs ON s.SKU_CODE = bs.SKU_Code JOIN Brand b ON bs.Brand_ID = b.ID WHERE b.Name LIKE '%KETOROL INJ%' AND hq.Name LIKE '%Enter hq name%' GROUP BY st.Name, hq.Name HAVING ROUND(SUM(CASE WHEN DATE_PART('month', s.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE) THEN s.PRIMARY_SALES ELSE 0 END), 2) < ROUND(((SELECT COALESCE(SUM(s1.PRIMARY_SALES), 0) FROM Sales s1 WHERE DATE_PART('month', s1.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '3 month')) + (SELECT COALESCE(SUM(s2.PRIMARY_SALES), 0) FROM Sales s2 WHERE DATE_PART('month', s2.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '2 month')) + (SELECT COALESCE(SUM(s3.PRIMARY_SALES), 0) FROM Sales s3 WHERE DATE_PART('month', s3.TRANSACTION_DATE) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month'))) / 3, 2) ORDER BY Difference_In_Billing LIMIT 5;",
    "use": "Dynamic",
    "questions": []
  }
]
