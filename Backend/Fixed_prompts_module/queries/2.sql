SELECT
	ST.NAME, -- Returns for each month
	SUM(
		CASE
			WHEN EXTRACT(
				MONTH
				FROM
					S.TRANSACTION_DATE
			) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '3 months')
			AND S.PRIMARY_SALES < 0 THEN S.PRIMARY_SALES
			ELSE 0
		END
	) AS SEPT_RETURNS,
	SUM(
		CASE
			WHEN EXTRACT(
				MONTH
				FROM
					S.TRANSACTION_DATE
			) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '2 months')
			AND S.PRIMARY_SALES < 0 THEN S.PRIMARY_SALES
			ELSE 0
		END
	) AS OCT_RETURNS,
	SUM(
		CASE
			WHEN EXTRACT(
				MONTH
				FROM
					S.TRANSACTION_DATE
			) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1 month')
			AND S.PRIMARY_SALES < 0 THEN S.PRIMARY_SALES
			ELSE 0
		END
	) AS NOV_RETURNS,
	-- Total returns for the last 3 months
	SUM(
		CASE
			WHEN S.PRIMARY_SALES < 0 THEN S.PRIMARY_SALES
			ELSE 0
		END
	) AS TOTAL_RETURNS,
	-- Total sales for the last 3 months
	SUM(
		CASE
			WHEN EXTRACT(
				MONTH
				FROM
					S.TRANSACTION_DATE
			) BETWEEN EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '3 months') AND EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1 month') THEN S.PRIMARY_SALES
			ELSE 0
		END
	) AS TOTAL_SALES,
	-- Percentage of returns compared to total sales
	(
		SUM(
			CASE
				WHEN S.PRIMARY_SALES < 0 THEN S.PRIMARY_SALES
				ELSE 0
			END
		) * 100.0
	) / NULLIF(
		SUM(
			CASE
				WHEN EXTRACT(
					MONTH
					FROM
						S.TRANSACTION_DATE
				) BETWEEN EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '3 months') AND EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1 month') THEN S.PRIMARY_SALES
				ELSE 0
			END
		),
		0
	) AS RETURNS_PERCENTAGE
FROM
	SALES S
	JOIN STOCKIST ST ON S.STOCKISTID = ST.ID
	JOIN SKU SK ON S.SKUCODE = SK.CODE
WHERE
	UPPER(SK.NAME) LIKE UPPER('%Ketorol Injection 1Ml%')
	AND S.TRANSACTION_DATE >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '3 months')::DATE
	AND S.TRANSACTION_DATE <= (
		DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') + INTERVAL '1 month' - INTERVAL '1 day'
	)::DATE
GROUP BY
	ST.NAME
HAVING
	SUM(
		CASE
			WHEN S.PRIMARY_SALES < 0 THEN S.PRIMARY_SALES
			ELSE 0
		END
	) != 0
ORDER BY
	TOTAL_RETURNS DESC
LIMIT
	3